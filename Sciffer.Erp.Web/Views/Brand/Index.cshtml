@using Sciffer.Erp.Domain.Model
@{
    ViewBag.Title = "Index";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
<br /><br /><br />
<div>
    @Html.EJ().Dialog("ErrorList").Title("ErrorList").ShowOnInit(false)
    @(Html.EJ().Grid<REF_BRAND>("Grid")
              .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.Datasource).RemoveURL(Url.Action("InlineDelete", "Brand")).InsertURL(Url.Action("InlineInsert", "Brand")).UpdateURL(Url.Action("InlineInsert", "Brand"))
                       .Adaptor(AdaptorType.RemoteSaveAdaptor).Offline(false))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.InlineFormTemplate).InlineFormTemplateID("#template").ShowDeleteConfirmDialog(true); })
        .EnableAltRow().AllowPaging()
        .PageSettings(p => { p.PageSize(10); })
        .EnableAltRow()
        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);               
                items.AddTool(ToolBarItems.ExcelExport);               
                items.AddTool(ToolBarItems.PrintGrid);

            });
        })
        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "Generic", new { ctrlname = "Brand" }))
        .ExportToPdfAction(Url.Action("ExportToPdf", "Generic", new { ctrlname = "Brand" })).ExportToWordAction(Url.Action("ExportToWord", "Generic", new { ctrlname = "Brand" })))
        .AllowSorting()
        .AllowPaging()
        .IsResponsive()
        .AllowFiltering()
        .ShowColumnChooser()
        .AllowReordering()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .Columns(col =>
        {
            col.Field("BRAND_ID").HeaderText("ID").IsPrimaryKey(true).Width(80).Visible(false).Add();
            col.Field("BRAND_NAME").HeaderText("Brand").ValidationRules(v => v.AddRule("required", true)).Add();
            col.Field("is_blocked").HeaderText("Blocked").Visible(false).Add();

        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })

    )
</div>

<script id="template" type="text/template">

    <div>
        <div class="row">

            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="hidden" id="BRAND_ID" name="BRAND_ID" value="{{: BRAND_ID}}" class="form-control" />
            </div>
        </div>
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Brand *
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="text" id="BRAND_NAME" name="BRAND_NAME" value="{{: BRAND_NAME}}" class="form-control" />
            </div>
        </div>
        <br />

        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Blocked
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                <input type="checkbox" id="is_blocked" name="is_blocked">
            </div>
        </div>
    </div>
</script>

<script type="text/javascript">
            var flag = true;
            function complete(args) {

                if (args.requestType == "add")
                {
                    $('#is_blocked').checkboxpicker();

                }
                if (args.requestType == "beginedit") {
                    document.getElementById('BRAND_NAME').setAttribute('disabled', 'disabled');
                    if (args.rowData.is_blocked == true) {
                        //Check
                        document.getElementById('is_blocked').setAttribute('checked', 'checked');
                    }
                    else {
                        //UnCheck
                        document.getElementById('is_blocked').removeAttribute('checked');
                    }
                    $('#is_blocked').checkboxpicker();

                }

                if (args.requestType == "save")
                {
                    if (args.data.text == 'duplicate') {
                        sweetAlert("", "Brand already exists!", "error");
                        if (args.model.dataSource.dataSource.json[0].BRAND_ID == null) {
                            args.model.dataSource.dataSource.json = args.model.dataSource.dataSource.json.splice(1, args.model.dataSource.dataSource.json.length);
                        }
                    }
                    var gridObj = $("#Grid").ejGrid("instance");
                    gridObj.refreshContent();
                }
            }
            function EndProcess() {
                var gridObj = $("#Grid").ejGrid("instance");              
                gridObj.refreshContent();
            }
</script>

