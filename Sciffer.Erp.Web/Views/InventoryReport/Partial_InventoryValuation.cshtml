@using Sciffer.Erp.Domain.ViewModel
@{(Html.EJ().Grid<report_inventory_vm>("Editing")
            .Datasource(ds => ds.URL(Url.Action("GetInventoryReport", "InventoryReport") + "?entity=" + ViewBag.entity + "&from_date=" + ViewBag.from_date + "&to_date=" + ViewBag.to_date + "&plant_id=" + ViewBag.plant_id + "&sloc_id=" + ViewBag.sloc_id + "&item_id=" + ViewBag.item_id + "&item_category_id=" + ViewBag.item_category_id + "&bucket_id=" + ViewBag.bucket_id).Adaptor(AdaptorType.UrlAdaptor))

                                      .AllowFiltering()
                                       .AllowPaging().PageSettings(a => a.PageSize(20))
                                          .FilterSettings(X => X.FilterType(FilterType.Excel))
                                      .ShowColumnChooser()
                                      .AllowSorting()
                                      .AllowScrolling()
                                      .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "InventoryReport", new { ctrlname = "InventoryValuationReport" })))
                                               .ScrollSettings(scroll => { scroll.Width("100%").Height("50%"); })

                                  .ToolbarSettings(toolbar =>
                                  {
                                      toolbar.ShowToolbar().ToolbarItems(items =>
                                      {
                                          items.AddTool(ToolBarItems.Search);
                                          items.AddTool(ToolBarItems.ExcelExport);
                                          items.AddTool(ToolBarItems.PrintGrid);
                                      });
                                  })
                          .Columns(col =>
                          {
                              col.Field("category").Width("15%").HeaderText("Item Category code").Add();
                              col.Field("Doc_Category").Width("15%").HeaderText("Item Category Description").Add();
                              col.Field("item_code").Width("15%").HeaderText("Item Code").Add();
                              col.Field("item_name").Width("15%").HeaderText("Item Description").Add();
                              col.Field("plant_code").Width("15%").HeaderText("Plant Code").Add();
                              col.Field("plant_name").Width("15%").HeaderText("Plant Description").Add();
                              col.Field("uom_name").Width("15%").HeaderText("UoM").Add();
                              col.Field("item_valuation_name").Width("15%").HeaderText("Costing Method").Add();
                              col.Field("quantity").Width("15%").HeaderText("Qty").Format("{0:n2}").TextAlign(TextAlign.Right).Format("{0:n2}").Add();
                              col.Field("rate").Width("15%").HeaderText("Rate").Format("{0:n2}").TextAlign(TextAlign.Right).Format("{0:n2}").Add();
                              col.Field("value").Width("15%").HeaderText("Value").Format("{0:n2}").TextAlign(TextAlign.Right).Format("{0:n2}").Add();
                              col.Field("gl_ledger_code").Width("15%").HeaderText("Control Account Code").Add();
                              col.Field("gl_ledger_name").Width("15%").HeaderText("Control Account Description").Add();
                          }).ClientSideEvents(eve => { eve.ToolbarClick("OnToolbarClicki"); })).Render();}
@Html.EJ().ScriptManager()





