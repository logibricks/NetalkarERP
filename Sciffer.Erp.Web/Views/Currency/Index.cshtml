@model IEnumerable<Sciffer.Erp.Domain.Model.REF_CURRENCY>

@using Sciffer.Erp.Domain.Model
@{
    ViewBag.Title = "Index";
}
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
<br /><br /><br />
<div>
    @Html.EJ().Dialog("ErrorList").Title("ErrorList").ShowOnInit(false)
    @(Html.EJ().Grid<REF_CURRENCYVM>("Grid")
       .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.Datasource).RemoveURL(Url.Action("InlineDelete", "Currency")).InsertURL(Url.Action("InlineInsert", "Currency")).UpdateURL(Url.Action("InlineInsert", "Currency"))
                       .Adaptor(AdaptorType.RemoteSaveAdaptor).Offline(false))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.InlineFormTemplate).InlineFormTemplateID("#template").ShowDeleteConfirmDialog(true); })
        .EnableAltRow().AllowPaging()
        .PageSettings(p => { p.PageSize(10); })
        .EnableAltRow()

        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);               
                items.AddTool(ToolBarItems.Update);
                items.AddTool(ToolBarItems.Cancel);
                items.AddTool(ToolBarItems.ExcelExport);              
                items.AddTool(ToolBarItems.PrintGrid);
            });
        })
        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "Generic",new {ctrlname= "Currency" })))        
        .AllowSorting()
        .AllowPaging()
        .IsResponsive()
        .AllowFiltering()
        .ShowColumnChooser()
        .AllowReordering()
        .AllowScrolling()
        .ScrollSettings(col => { col.Width("100%"); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .Columns(col =>
        {
            col.Field("CURRENCY_ID").Width("15%").HeaderText("ID").IsPrimaryKey(true).Width(80).Visible(false).Add();
            col.Field("CURRENCY_NAME").Width("15%").HeaderText("Currency Code").ValidationRules(val => val.AddRule("required", true)).Add();
            col.Field("CURRENCY_DESCRIPTION").Width("15%").HeaderText("Currency Description").ValidationRules(val => val.AddRule("required", true)).Add();
            col.Field("CURRENCY_COUNTRY_ID").Width("15%").HeaderText("Country").Visible(false).ValidationRules(val => val.AddRule("required", true)).Add();
            col.Field("CountryName").Width("15%").HeaderText("Country Name").Add();
            col.Field("is_blocked").Width("15%").HeaderText("Blocked").Visible(false).Add();

        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
    )
</div>

<script id="template" type="text/template">

    <div>
        <div class="row">
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="hidden" id="CURRENCY_ID" name="CURRENCY_ID" value="{{: CURRENCY_ID}}" class="form-control" />
            </div>
        </div>
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Currency Code *
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="text" id="CURRENCY_NAME" name="CURRENCY_NAME" value="{{: CURRENCY_NAME}}" class="form-control" />
            </div>
        </div>
        <br/>
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
              Currency Description *
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="text" id="CURRENCY_DESCRIPTION" name="CURRENCY_DESCRIPTION" value="{{: CURRENCY_DESCRIPTION}}" class="form-control" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Country *
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                @Html.DropDownList("CURRENCY_COUNTRY_ID", (new System.Web.Mvc.SelectList(ViewBag.COUNTRY_ID, "COUNTRY_ID", "COUNTRY_NAME")), "--select--", htmlAttributes: new { @class = "form-control" })
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Blocked
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                <input type="checkbox" id="is_blocked" name="is_blocked">
            </div>
        </div>
        
    </div>
</script>



<script type="text/javascript">
    $(function () {
        var specialChars = "<>@@!#$%^&*()_+[]{}?:;|'\"\\,./~`-="
        var check = function (string) {
            for (i = 0; i < specialChars.length; i++) {
                if (string.indexOf(specialChars[i]) > -1) {
                    return true
                }
            }
            return false;
        }

        $.validator.addMethod("customddlcheck", function (value, element, params) {
            alert(element.value);
            return check(element.value);
        }, "+ sign is requered");

        $.validator.addMethod("customendcheck", function (value, element, params) {
            var a = new Date($('#START_WEEK_ID :selected').text());
            var b = new Date($('#END_WEEK_ID :selected').text());
           
            return b >= a;  
            }, "Start Date can not be greater then End Date");

    });
    var flag = true;
    function complete(args) {
        if (args.requestType == "add") {
            $('#IS_LOCAL_CURRENCY').checkboxpicker();
            $('#is_blocked').checkboxpicker();
        }
        if (args.requestType == "beginedit") {

            document.getElementById('CURRENCY_NAME').setAttribute('disabled', 'disabled');
            document.getElementById('CURRENCY_DESCRIPTION').setAttribute('disabled', 'disabled');
            document.getElementById('CURRENCY_COUNTRY_ID').setAttribute('disabled', 'disabled');
            $("#CURRENCY_COUNTRY_ID").val(args.rowData.CURRENCY_COUNTRY_ID);
            if (args.rowData.is_blocked == true) {
                //Check
                document.getElementById('is_blocked').setAttribute('checked', 'checked');
            }
            else {
                //UnCheck
                document.getElementById('is_blocked').removeAttribute('checked');
            }
             $('#is_blocked').checkboxpicker();
        }
        if (args.requestType == "save") {
            if (args.data.text == 'duplicate') {
                sweetAlert("", "Currency already exists!", "error");
                if (args.model.dataSource.dataSource.json[0].CURRENCY_ID == null) {
                    args.model.dataSource.dataSource.json = args.model.dataSource.dataSource.json.splice(1, args.model.dataSource.dataSource.json.length);
                }
            }
            var gridObj = $("#Grid").ejGrid("instance");
            gridObj.refreshContent();
        }
    }

    function EndProcess() {
        var gridObj = $("#Grid").ejGrid("instance");
        //console.log(gridObj);
        gridObj.refreshContent();
    }
</script>