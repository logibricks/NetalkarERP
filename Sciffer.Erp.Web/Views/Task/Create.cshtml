@model Sciffer.Erp.Domain.ViewModel.ref_task_vm
@using Sciffer.Erp.Domain.Model;
@using Newtonsoft.Json
@{
    ViewBag.Title = "Create";
}
@using (Html.BeginForm("Create", "Task", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal" style="margin-top:10px;">
        <div>@Html.ValidationSummary(true, "", new { @class = "text-danger" })</div>
        <div id="task_id" hidden></div>
        @*<div id="document_no" hidden></div>*@
        @Html.HiddenFor(model => model.document_no)
        <div class="form-group">
            <div class="row">
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.task_category_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.DropDownList("task_category_id", (System.Web.Mvc.SelectList)ViewBag.categorylist, "--Select--", new { @class = "form-control  validinput ", @required = true, @onchange = "GetDocumentNumber(this.value);" })
                            @Html.ValidationMessageFor(model => model.task_category_id, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.task_type_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.DropDownList("task_type_id", (System.Web.Mvc.SelectList)ViewBag.Tasktypelist, "---Select---", new { @class = "form-control validinput", @required = true })
                            @Html.ValidationMessageFor(model => model.task_type_id, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
               
            </div>
            <div class="row">
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.task_doer_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.DropDownList("task_doer_id", (new System.Web.Mvc.SelectList(ViewBag.Custlist,"employee_id", "employee_code")), "---Select---", new { @class = "form-control validinput", @required = true,@onchange="FilterReviewer()" })
                            @Html.ValidationMessageFor(model => model.task_doer_id, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.task_reviewer_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.DropDownList("task_reviewer_id", Enumerable.Empty<SelectListItem>(), "---Select---", new { @class = "form-control validinput", @required = true })
                            @Html.ValidationMessageFor(model => model.task_reviewer_id, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
               
            </div>
            <div class="row">
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.task_name, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.EditorFor(model => model.task_name, new { htmlAttributes = new { @class = "form-control validinput ", @required = true, } })
                            @Html.ValidationMessageFor(model => model.task_name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.due_date, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.EditorFor(model => model.due_date, new { htmlAttributes = new { @class = "form-control validinput", @required = true, } })
                            @Html.ValidationMessageFor(model => model.due_date, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.is_recurring, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-1 col-sm-1 col-xs-12">
                            @Html.CheckBox("is_recurring", new { @onchange = "ShowPeriodicity()" })
                            @Html.ValidationMessageFor(model => model.is_recurring, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.task_periodicity_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.DropDownList("task_periodicity_id", (System.Web.Mvc.SelectList)ViewBag.Periodiclist, "---Select---", new { @class = "form-control ", @disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.task_periodicity_id, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-lg-8 col-sm-8">
                    <div class="form-group">
                        @Html.LabelFor(model => model.remind_before_days, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-3 col-sm-3 col-xs-12">
                            @Html.EditorFor(model => model.remind_before_days, new { htmlAttributes = new { @class = "form-control validinput", @required = true,  } })
                            @Html.ValidationMessageFor(model => model.remind_before_days, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-8 col-sm-8">
                    <div class="form-group">
                        @Html.LabelFor(model => model.first_escalation_days, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-3 col-sm-3 col-xs-12">
                            @Html.EditorFor(model => model.first_escalation_days, new { htmlAttributes = new { @class = "form-control validinput ", @required = true, @onchange = "GetValidation()"} })
                            @Html.ValidationMessageFor(model => model.first_escalation_days, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-8 col-sm-8">
                    <div class="form-group">
                        @Html.LabelFor(model => model.second_escalation_days, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-3 col-sm-3 col-xs-12">
                            @Html.EditorFor(model => model.second_escalation_days, new { htmlAttributes = new { @class = "form-control validinput", @required = true, @onchange = "GetValidation()" } })
                            @Html.ValidationMessageFor(model => model.second_escalation_days, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-body" role="tabpanel" data-example-id="togglable-tabs">
                <ul id="myTab" class="nav nav-tabs bar_tabs" role="tablist">
                    <li class="active"><a data-toggle="tab" href="#sectionA">Details</a></li>
                    @*<li><a data-toggle="tab" href="#sectionB">Line Item</a></li>
                    <li><a data-toggle="tab" href="#sectionF">Transport Details</a></li>*@
                   
                </ul>
                <div class="tab-content">
                    <div id="sectionA" class="tab-pane fade in active" style="margin-top:10px;">
                        <div class="row">
                            <div class="row">
                                <div class="col-lg-6 col-sm-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.task_details, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                        <div class="col-lg-8 col-sm-8 col-xs-12">
                                            @Html.EditorFor(model => model.task_details, new { htmlAttributes = new { @class = "form-control validinput " , @required = true, } })
                                            @Html.ValidationMessageFor(model => model.task_details, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6 col-sm-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.attachment, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                        <div class="col-md-8 col-sm-8 col-xs-12">
                                            <input type="file" class="form-control" id="FileUpload" name="FileUpload" /> 
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
                  
                </div>

                <div class="row">
                    <div class="col-lg12 col-sm-12">
                        <div class="form-group">
                            <div class="col-md-12 col-sm-12 col-xs-12">
                                <input type="submit" value="Create" data-controller="Task" class="btn btn-success" onclick="TabletoJeson();" style="float:right" id="create" name="create" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            }
            <div>
                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
            </div>
            <script src="~/Scripts/RemoveUnexpectedFile.js"></script>
            <script src="~/Scripts/requirevalidation.js"></script>


            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
                <script type="text/javascript">
                   
                    $("#remind_before_days").change(function () {
                        let days= $("#remind_before_days").val();
                        if (parseInt(days)<=0) {    
                            swal("", "Please enter greater than 0 value", "error");
                            $("#remind_before_days").val('');
                        }
                    });

                    $("#first_escalation_days").change(function () {
                        let days= $("#first_escalation_days").val();
                        if (parseInt(days)<=0) {    
                            swal("", "Please enter greater than 0 value", "error");
                            $("#first_escalation_days").val('');
                        }
                    });

                    $("#second_escalation_days").change(function () {
                        let days= $("#second_escalation_days").val();
                        if (parseInt(days)<=0) {    
                            swal("", "Please enter greater than 0 value", "error");
                            $("#second_escalation_days").val('');
                        }
                    });

                   
                    $("#second_escalation_days").keydown(function (event) {
                        if (event.shiftKey) {
                            event.preventDefault();
                        }

                        var input = event.currentTarget.value;

                        if (event.keyCode == 46 || event.keyCode == 8) {
                        }
                        else {
                            if (event.keyCode < 95) {
                                if (event.keyCode < 48 || event.keyCode > 57) {
                                    event.preventDefault();
                                }
                            }
                            else {
                                if (event.keyCode < 96 || event.keyCode > 105) {
                                    event.preventDefault();
                                }
                            }
                        }
                    });

                    $("#remind_before_days").keydown(function (event) {
                        if (event.shiftKey) {
                            event.preventDefault();
                        }

                        var input = event.currentTarget.value;

                        if (event.keyCode == 46 || event.keyCode == 8) {
                        }
                        else {
                            if (event.keyCode < 95) {
                                if (event.keyCode < 48 || event.keyCode > 57) {
                                    event.preventDefault();
                                }
                            }
                            else {
                                if (event.keyCode < 96 || event.keyCode > 105) {
                                    event.preventDefault();
                                }
                            }
                        }
                    });

                    $("#first_escalation_days").keydown(function (event) {
                        if (event.shiftKey) {
                            event.preventDefault();
                        }

                        var input = event.currentTarget.value;

                        if (event.keyCode == 46 || event.keyCode == 8) {
                        }
                        else {
                            if (event.keyCode < 95) {
                                if (event.keyCode < 48 || event.keyCode > 57) {
                                    event.preventDefault();
                                }
                            }
                            else {
                                if (event.keyCode < 96 || event.keyCode > 105) {
                                    event.preventDefault();
                                }
                            }
                        }
                    });

                    $(document).ready(function () {


                        //Display Only Date till today //
                        var dtToday = new Date();
                        var month = dtToday.getMonth() + 1;     // getMonth() is zero-based
                        var day = dtToday.getDate();
                        var year = dtToday.getFullYear();
                        if (month < 10)
                            month = '0' + month.toString();
                        if (day < 10)
                            day = '0' + day.toString();

                        var maxDate = year + '-' + month + '-' + day;
                        $('#due_date').attr('min', maxDate);

                        $("#task_category_id").select2({
                            placeholder: "Select Category",
                            allowClear: true
                        });

                        $("#task_type_id").select2({
                            placeholder: "Select Task Type",
                            allowClear: true
                        });

                        $("#task_doer_id").select2({
                            placeholder: "Select Task Doer",
                            allowClear: true
                        });

                        $("#task_reviewer_id").select2({
                            placeholder: "Select Task Reviewer",
                            allowClear: true
                        });

                        $("#task_periodicity_id").select2({
                            placeholder: "Select Periodicity",
                            allowClear: true
                        });

                        //if (!$("#task_doer_id option:selected").val()) {
                        //    FilterReviewer();
                        //}
                      

                    });

                    function FilterReviewer() {

                        var doerlist =    @Html.Raw(JsonConvert.SerializeObject(ViewBag.Custlist));
                        var revlist = doerlist.filter(x=>x.employee_id != $("#task_doer_id").val());

                        $("#task_reviewer_id").html('');
                        $("#task_reviewer_id").val("").trigger("change");
                        $("#task_reviewer_id").append($('<option></option>').val('0').html(""));
                        $.each(revlist, function (i, cycle) {
                            $("#task_reviewer_id").append(
                            $('<option></option>').val(cycle.employee_id).html(cycle.employee_code));
                        });
                    }

                    function GetValidation() {
                        var fvalue = $("#first_escalation_days").val();
                        var svalue = $("#second_escalation_days").val();
                        if (fvalue != "" || svalue != "") {
                            if (parseInt(fvalue) > parseInt(svalue)) {
                                $("#second_escalation_days").val("");
                                swal("", "2nd escalation should be more than 1st escalation!", "error");
                                return false;

                            }
                        }
                    }

                    function GetDocumentNumber(id) {
                        if (id != '') {
                            $.ajax({
                                type: 'GET',
                                url: '@Url.Action("GetDocumentNumbering", "Generic")',
                                data: { id: id },
                                success: function (ITEM) {
                                    $('#document_no').val(ITEM);
                                },
                                error: function (emp) {
                                    $('#document_no').val('');
                                }
                            });
                        }
                        else {
                            $('#document_no').val('');
                        }
                    }

                    function ShowPeriodicity() {
                        var val = $("#is_recurring").prop('checked');
                        if (val == true) {
                            $("#task_periodicity_id").prop('disabled', false);
                        }
                        else {
                            $("#task_periodicity_id").prop('disabled', true);

                        }
                    }

                    function TabletoJeson() {
                    }
                </script>
            }
