@using Sciffer.Erp.Domain.Model
@{
    ViewBag.Title = "Index";
}
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
<br /><br /><br />
<div>
    @Html.EJ().Dialog("ErrorList").Title("ErrorList").ShowOnInit(false)
    @(Html.EJ().Grid<REF_UOM>("Grid")
       .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.Datasource).RemoveURL(Url.Action("InlineDelete", "UOM")).InsertURL(Url.Action("InlineInsert", "UOM")).UpdateURL(Url.Action("InlineInsert", "UOM"))
                       .Adaptor(AdaptorType.RemoteSaveAdaptor).Offline(false))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.InlineFormTemplate).InlineFormTemplateID("#template").ShowDeleteConfirmDialog(true); })
        .EnableAltRow().AllowPaging()
        .PageSettings(p => { p.PageSize(10); })
        .EnableAltRow()
        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);            
                items.AddTool(ToolBarItems.Update);
                items.AddTool(ToolBarItems.Cancel);
                items.AddTool(ToolBarItems.ExcelExport);              
                items.AddTool(ToolBarItems.PrintGrid);
                
            });
        })
        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "Generic", new { ctrlname = "UOM" })))     
        
        .AllowSorting()
        .AllowPaging()
        .IsResponsive()
        .AllowFiltering()
        .ShowColumnChooser()
        .AllowReordering()
         .AllowScrolling()
        .ScrollSettings(col => { col.Width("100%"); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .Columns(col =>
        {            
            col.Field("UOM_NAME").Width("15%").HeaderText("UoM Code").ValidationRules(v => v.AddRule("required", true)).Add();
            col.Field("UOM_DESCRIPTION").Width("15%").HeaderText("UoM Description").ValidationRules(v => v.AddRule("required", true)).Add();
            col.Field("is_blocked").Width("15%").HeaderText("Blocked").Visible(false).Add();
            col.Field("UOM_ID").Width("15%").HeaderText("ID").IsPrimaryKey(true).Visible(false).Width(80).Add();
        })
    .ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
    )
</div>

<script id="template" type="text/template">

    <div>
        <div class="row">

            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="hidden" id="UOM_ID" name="UOM_ID" value="{{: UOM_ID}}" class="form-control" />
            </div>
        </div>
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                UoM Code*
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="text" id="UOM_NAME" name="UOM_NAME" value="{{: UOM_NAME}}" class="form-control" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                UoM Description*
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="text" id="UOM_DESCRIPTION" name="UOM_DESCRIPTION" value="{{: UOM_DESCRIPTION}}" class="form-control" />
            </div>
        </div>
        <br/>
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Blocked
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                <input type="checkbox" id="is_blocked" name="is_blocked">
            </div>
        </div>
    </div>
</script>
<script type="text/javascript">
            var flag = true;
            function complete(args) {

                if (args.requestType == "add") {

                    $('#is_blocked').checkboxpicker();
                   
                }
                if (args.requestType == "beginedit") {

                   
                      document.getElementById('UOM_NAME').setAttribute('disabled', 'disabled');
                      document.getElementById('UOM_DESCRIPTION').setAttribute('disabled', 'disabled');
                      if (args.rowData.is_blocked == true) {
                        //Check
                          document.getElementById('is_blocked').setAttribute('checked', 'checked');
                    }
                    else {
                        //UnCheck
                          document.getElementById('is_blocked').removeAttribute('checked');
                    }
                      $('#is_blocked').checkboxpicker();

                }

                if (args.requestType == "save") {
                    if (args.data.text == 'duplicate') {
                        sweetAlert("", "Units of Measurement already exists!", "error");
                        if (args.model.dataSource.dataSource.json[0].UOM_ID == null) {
                            args.model.dataSource.dataSource.json = args.model.dataSource.dataSource.json.splice(1, args.model.dataSource.dataSource.json.length);
                        }
                    }
                    var gridObj = $("#Grid").ejGrid("instance");
                    gridObj.refreshContent();
                }
            }
            function EndProcess() {
                var gridObj = $("#Grid").ejGrid("instance");               
                gridObj.refreshContent();
            }
</script>

