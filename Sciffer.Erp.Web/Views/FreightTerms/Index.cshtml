@model IEnumerable<Sciffer.Erp.Domain.Model.REF_FREIGHT_TERMS>
@using Sciffer.Erp.Domain.Model
@{
    ViewBag.Title = "Index";
}
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<br /><br /><br />
<div>
    @Html.EJ().Dialog("ErrorList").Title("ErrorList").ShowOnInit(false)
    @(Html.EJ().Grid<REF_FREIGHT_TERMS>("Grid")
        .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.DataSource).RemoveURL(Url.Action("InlineDelete", "FreightTerms")).InsertURL(Url.Action("InlineInsert", "FreightTerms")).UpdateURL(Url.Action("InlineInsert", "FreightTerms"))
                       .Adaptor(AdaptorType.RemoteSaveAdaptor).Offline(false))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.InlineFormTemplate).InlineFormTemplateID("#template").ShowDeleteConfirmDialog(true); })
        .EnableAltRow().AllowPaging()
        .PageSettings(p => { p.PageSize(10); })
        .EnableAltRow()

        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);
               
                items.AddTool(ToolBarItems.Update);
                items.AddTool(ToolBarItems.Cancel);
                items.AddTool(ToolBarItems.ExcelExport);             
                items.AddTool(ToolBarItems.PrintGrid);
            });
        })
        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "Generic",new { ctrlname= "FreightTerms" }))
        .ExportToPdfAction(Url.Action("ExportToPdf", "Generic", new { ctrlname = "FreightTerms" })).ExportToWordAction(Url.Action("ExportToWord", "Generic", new { ctrlname = "FreightTerms" })))
        .AllowSorting()
        .AllowPaging()
        .IsResponsive()
        .AllowFiltering()
        .ShowColumnChooser()
        .AllowReordering()
         .AllowScrolling()
        .ScrollSettings(col => { col.Width("100%"); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .Columns(col =>
        {
            col.Field("FREIGHT_TERMS_ID").Width("15%").HeaderText("ID").IsPrimaryKey(true).Width(80).Visible(false).Add();
            col.Field("FREIGHT_TERMS_NAME").Width("15%").HeaderText("Freight Terms").ValidationRules(val => val.AddRule("required", true)).Add();
            col.Field("Is_blocked").Width("15%").HeaderText("Blocked").Visible(false).Add();

        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
    )
</div>

<script id="template" type="text/template">

    <div>
        <div class="row">

            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="hidden" id="FREIGHT_TERMS_ID" name="FREIGHT_TERMS_ID" value="{{: FREIGHT_TERMS_ID}}" class="form-control" />
            </div>
        </div>
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Freight Terms *
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="text" id="FREIGHT_TERMS_NAME" name="FREIGHT_TERMS_NAME" value="{{: FREIGHT_TERMS_NAME}}" class="form-control" />
            </div>
        </div>
        <br/>
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Blocked
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                <input type="checkbox" id="Is_blocked" name="Is_blocked">
            </div>
        </div>
    </div>
</script>

<script type="text/javascript">
            var flag = true;
            function complete(args) {
                if (args.requestType == "add") {
                    $('#Is_blocked').checkboxpicker();
                }
                if (args.requestType == "beginedit") {
                    $("#Country_id").val(args.rowData.Country_id);
                    document.getElementById('FREIGHT_TERMS_NAME').setAttribute('disabled', 'disabled');
                   
                    if (args.rowData.Is_blocked == true) {
                        //Check
                        document.getElementById('Is_blocked').setAttribute('checked', 'checked');
                    }
                    else {
                        //UnCheck
                        document.getElementById('Is_blocked').removeAttribute('checked');
                    }
                    $('#Is_blocked').checkboxpicker();

                }
                if (args.requestType == "save") {
                    if (args.data.text == 'duplicate') {
                        sweetAlert("", "Freight Terms already exists!", "error");
                        if (args.model.dataSource.dataSource.json[0].FREIGHT_TERMS_ID == null) {
                            args.model.dataSource.dataSource.json = args.model.dataSource.dataSource.json.splice(1, args.model.dataSource.dataSource.json.length);
                        }
                    }
                    var gridObj = $("#Grid").ejGrid("instance");
                    gridObj.refreshContent();
                }
            }

            function EndProcess() {
                var gridObj = $("#Grid").ejGrid("instance");
                //console.log(gridObj);
                gridObj.refreshContent();
            }
</script>
