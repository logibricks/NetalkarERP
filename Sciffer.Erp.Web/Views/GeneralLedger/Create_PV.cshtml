
<div class="panel panel-default">
   
    <div class="panel-body">
        @using (Html.BeginForm("Create", "GeneralLedger"))
        {
            @Html.AntiForgeryToken()
            <br/>
            <div class="form-horizontal">
                <div class="col-sm-1"></div>
                <div class="col-sm-10">
                    <div class="row">
                        <label for="gl_account_type" class="col-sm-4 control-label">GL Account Type *</label>
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.DropDownList("gl_account_type", (System.Web.Mvc.SelectList)ViewBag.accounttype, new { @class = "form-control validinput", @onchange = "FillGlParentLedger(this.value)" })
                        </div>
                    </div>
                    <br />
                    <div class="row">

                        <label for="gl_ledger_code" class="col-sm-4 control-label">GL Ledger Code *</label>
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            <input type="text" name="gl_ledger_code" id="gl_ledger_code" class="form-control validinput" />
                        </div>

                    </div>
                    <br />
                    <div class="row">

                        <label for="gl_ledger_code" class="col-sm-4 control-label">GL Ledger Name *</label>
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            <input type="text" name="gl_ledger_name" id="gl_ledger_name" class="form-control validinput" />
                        </div>

                    </div>
                    <br />
                    <div class="row">
                        <label for="gl_head_account" class="col-sm-4 control-label">Head/Account *</label>
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.DropDownList("gl_head_account", new List<SelectListItem>
                            {
                            new SelectListItem{ Text="---Select---", Value = "" },
                            new SelectListItem{ Text="Head", Value = "1" },
                            new SelectListItem{ Text="Account", Value = "2" }
                            }, new { @class = "form-control validinput" })
                        </div>
                    </div>
                    <br />
                    <div class="row">

                        <label for="gl_parent_ledger_code" class="col-sm-4 control-label">GL Parent Ledger Code *</label>
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.DropDownList("gl_parent_ledger_code", (System.Web.Mvc.SelectList)ViewBag.generalledger, new { @class = "form-control validinput", @onchange = "FillGlParentLedger(this.value)" })
                        </div>

                    </div>
                    <br />
                    <div class="row">
                        <label for="is_blocked" class="col-sm-4 control-label">Blocked</label>
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            <div class="checkbox">
                                <input type="checkbox" name="is_blocked" id="is_blocked" />
                            </div>
                        </div>

                    </div>
                    <hr />
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" id="create" data-controller="GeneralLedger" class="btn btn-success" style="float:right" />

                        </div>
                    </div>
                </div>

            </div>
        }
    </div>
</div>
<script src="~/Scripts/requirevalidation.js"></script>
<script src="~/Scripts/jquery.filedrop.js"></script>
<script type="text/javascript">
    $(function () {
        FillGlParentLedger($('#gl_account_type').val())
        $('#dropZone').filedrop({
            url: '@Url.Action("UploadFiles", "GeneralLedger")',
            paramname: 'files',
            maxFiles: 5,
            dragOver: function () {
                $('#dropZone').css('background', 'blue');
            },
            dragLeave: function () {
                $('#dropZone').css('background', 'gray');
            },
            drop: function () {
                $('#dropZone').css('background', 'gray');
            },
            afterAll: function () {
                $('#dropZone').html('');

            },
            uploadFinished: function (i, file, response, time) {

                if (response.Status == "Failed") {
                    sweetAlert("File cannot be uploaded", "Error found " + response.text, "error");
                }
                if (response.Status == "Success") {
                    $('#uploadResult').append('<li>' + file.name + '</li>');
                    sweetAlert("", 'File Upload Sucessfully', "success");

                    swal({
                        title: "File Upload Sucessfully",
                        type: "success",
                        confirmButtonClass: "btn-danger",
                        confirmButtonText: "Okay",
                        closeOnConfirm: false
                    },
                    function (isConfirm) {
                        if (isConfirm) {
                            location.reload();
                        }
                    });
                }
                if (response.errorMessage != "") {
                    //console.log(response.error);
                    sweetAlert("File cannot be uploaded", response.errorMessage, "error");
                }
                if (response.error.length > 0) {
                    for (i = 0 ; i < response.error.length ; i++) {
                        if (response.error[i] != null) {
                            swal({
                                title: "File cannot be uploaded !" + "<br/>" + "<span style='font-size:16px'>" + response.text + " " + "Error found " + "</span>",
                                text: "Error is" + " " + "<small style='color:#F8BB86'>" + response.error[i] + "</small>",
                                html: true,
                                type: "error",
                            });
                        }
                    }
                }

            }
        });
    });
    $('#is_blocked').checkboxpicker();
   

    $("#gl_parent_ledger_code").select2({
        maximumSelectionLength: 4,
        placeholder: "Select GL Parent Code",
        allowClear: true
    });
    $('#is_blocked').checkboxpicker().on('change', function () {
        if ($(this).prop('checked')) {
            $('#is_blocked').val('True');
        }
        else {
            $('#is_blocked').val('False');
        }
        //console.log($('#is_blocked').val());
    });
</script>
