@using Sciffer.Erp.Domain.Model

@{
    ViewBag.Title = "Index";
}
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
<br/><br /><br />
<div>
    @Html.EJ().Dialog("ErrorList").Title("ErrorList").ShowOnInit(false)
    @(Html.EJ().Grid<REF_BUSINESS_UNIT>("Grid")
       .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.Datasource).RemoveURL(Url.Action("InlineDelete", "CustomerCategory")).InsertURL(Url.Action("InlineInsert", "CustomerCategory")).UpdateURL(Url.Action("InlineInsert", "CustomerCategory"))
                       .Adaptor(AdaptorType.RemoteSaveAdaptor).Offline(false))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.InlineFormTemplate).InlineFormTemplateID("#template").ShowDeleteConfirmDialog(true); })
         .EnableAltRow()
        .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
        {
            items.AddTool(ToolBarItems.Add);
            items.AddTool(ToolBarItems.Edit);         
            items.AddTool(ToolBarItems.Update);
            items.AddTool(ToolBarItems.Cancel);
            items.AddTool(ToolBarItems.ExcelExport);           
            items.AddTool(ToolBarItems.PrintGrid);
        }))
        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "Generic", new { ctrlname = "CustomerCategory" })))      
        .AllowSorting()
       .AllowPaging().PageSettings(a => a.PageSize(20))
        .IsResponsive()
        .AllowFiltering()
        .ShowColumnChooser()
        .AllowReordering()
        .AllowScrolling()
        .ScrollSettings(col => { col.Width("100%"); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .Columns(col =>
        {
            col.Field("CUSTOMER_CATEGORY_ID").Width("15%").HeaderText("ID").IsPrimaryKey(true).Visible(false).Width(80).Add();
            col.Field("CUSTOMER_CATEGORY_NAME").Width("15%").HeaderText("Customer Category").ValidationRules(val => val.AddRule("required", true)).Add();
            col.Field("is_blocked").Width("15%").HeaderText("Blocked").Visible(false).Add();

        }) .ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
        )
</div>
<script id="template" type="text/template">
    <div class="row">
        <input type="hidden" id="CUSTOMER_CATEGORY_ID" class="" name="CUSTOMER_CATEGORY_ID" value="{{: CUSTOMER_CATEGORY_ID}}">
    </div>
    <div class="row">
        <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
            Customer Category *
        </div>
        <div class="col-lg-6 col-md-6 col-xs-12">
            <input type="text" id="CUSTOMER_CATEGORY_NAME" name="CUSTOMER_CATEGORY_NAME" class="form-control" value="{{:CUSTOMER_CATEGORY_NAME}}">
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
            Blocked
        </div>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <input type="checkbox" id="is_blocked" name="is_blocked">
        </div>
    </div>
</script>
<script>
    var flag = true;
    function complete(args) {
        if (args.requestType == "add") {
            $('#is_blocked').checkboxpicker();
        }
        if (args.requestType == "save") {
            if (args.data.text == 'duplicate') {
                sweetAlert("", "Customer category already exists!", "error");
                if (args.model.dataSource.dataSource.json[0].CUSTOMER_CATEGORY_ID == null) {
                    args.model.dataSource.dataSource.json = args.model.dataSource.dataSource.json.splice(1, args.model.dataSource.dataSource.json.length);
                }
            }
            var gridObj = $("#Grid").ejGrid("instance");
            gridObj.refreshContent();
        }
        if (args.requestType == "beginedit") {

            $("#CUSTOMER_CATEGORY_NAME").attr('disabled', 'disabled');
            if (args.rowData.is_blocked == true) {
                //Check
                document.getElementById('is_blocked').setAttribute('checked', 'checked');
            }
            else {
                //UnCheck
                document.getElementById('is_blocked').removeAttribute('checked');
            }

            $('#is_blocked').checkboxpicker();
        }
    }
    function EndProcess() {
        var gridObj = $("#Grid").ejGrid("instance");
        //console.log(gridObj);
        gridObj.refreshContent();
    }
</script>
