<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
@using Sciffer.Erp.Domain.Model
@{
    ViewBag.Title = "Index";
}
<br /><br /><br />
<div>
    @Html.EJ().Dialog("ErrorList").Title("ErrorList").ShowOnInit(false)
    @(Html.EJ().Grid<payment_terms_vm>("Grid")
        .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.DataSource).RemoveURL(Url.Action("InlineDelete", "PaymentTerms")).InsertURL(Url.Action("InlineInsert", "PaymentTerms")).UpdateURL(Url.Action("InlineInsert", "PaymentTerms"))
                       .Adaptor(AdaptorType.RemoteSaveAdaptor).Offline(false))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.InlineFormTemplate).InlineFormTemplateID("#template").ShowDeleteConfirmDialog(true).ShowConfirmDialog(true); })
        .EnableAltRow().AllowPaging()
        .PageSettings(p => { p.PageSize(10); })
        .EnableAltRow()
        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);                
                items.AddTool(ToolBarItems.Cancel);
                items.AddTool(ToolBarItems.ExcelExport);               
                items.AddTool(ToolBarItems.PrintGrid);

            });
        })
        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "Generic", new { ctrlname = "PaymentTerms" })))        
        
        .AllowSorting()
        .AllowPaging()
        .IsResponsive()
        .AllowFiltering()
        .ShowColumnChooser()
        .AllowReordering()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .Columns(col =>
        {
            col.Field("payment_terms_id").HeaderText("ID").IsPrimaryKey(true).Visible(false).Width(80).Add();
            col.Field("payment_terms_code").HeaderText("Payment Terms Code").ValidationRules(v => v.AddRule("required", true)).Add();
            col.Field("payment_terms_description").HeaderText("Payment Terms Description").ValidationRules(v => v.AddRule("required", true)).Add();
            col.Field("payment_terms_days").HeaderText("No. of Days").ValidationRules(v => v.AddRule("required", true)).Add();
            col.Field("payment_terms_due_date").HeaderText("Due Date Based On").Add();
            col.Field("is_blocked").HeaderText("Blocked").Visible(false).Add();
            col.Field("payment_terms_due_date_id").HeaderText("Due Date Based On").Visible(false).ValidationRules(v => v.AddRule("required", true)).Add();
        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
    )
</div>

<script id="template" type="text/template">

    <div>
        <div class="row">

            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="hidden" id="payment_terms_id" name="payment_terms_id" value="{{: payment_terms_id}}" class="form-control" />
            </div>
        </div>
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Payment Terms Code *
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="text" id="payment_terms_code" name="payment_terms_code" value="{{: payment_terms_code}}" class="form-control" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Payment Terms Description *
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="text" id="payment_terms_description" name="payment_terms_description" value="{{: payment_terms_description}}" class="form-control" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                No. of Days *
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="number" id="payment_terms_days" name="payment_terms_days" value="{{: payment_terms_days}}" class="form-control" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Due Date Based On *
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                @Html.DropDownList("payment_terms_due_date_id", (System.Web.Mvc.SelectList)ViewBag.DueDateNames, "---Select---", new { @class = "form-control" })
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Blocked
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                <input type="checkbox" id="is_blocked" name="is_blocked">
            </div>
        </div>
    </div>
</script>

<script type="text/javascript">
    var flag = true;
    function complete(args) {
        if (args.requestType == "add") {
            $('#is_blocked').checkboxpicker();
        }
        if (args.requestType == "beginedit") {
            $("#payment_terms_due_date_id").val(args.rowData.payment_terms_due_date_id);
            document.getElementById('payment_terms_code').setAttribute('disabled', 'disabled');
            document.getElementById('payment_terms_description').setAttribute('disabled', 'disabled');
            if (args.rowData.is_blocked == true) {
                //Check
                document.getElementById('is_blocked').setAttribute('checked', 'checked');
            }
            else {
                //UnCheck
                document.getElementById('is_blocked').removeAttribute('checked');
            }
            $('#is_blocked').checkboxpicker();

        }

        if (args.requestType == "save") {
            if (args.data.text == 'duplicate') {
                sweetAlert("", "Payment Terms already exists!", "error");
                if (args.model.dataSource.dataSource.json[0].payment_terms_id == null) {
                    args.model.dataSource.dataSource.json = args.model.dataSource.dataSource.json.splice(1, args.model.dataSource.dataSource.json.length);
                }
            }
            var gridObj = $("#Grid").ejGrid("instance");
            gridObj.refreshContent();
        }
    }

    function EndProcess() {
        var gridObj = $("#Grid").ejGrid("instance");
        gridObj.refreshContent();
    }
</script>

