@using Sciffer.Erp.Domain.Model
@{
    ViewBag.Title = "Index";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<br /><br /><br />
<div>
    @(Html.EJ().Grid<ref_bank>("Grid")
         .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.Datasource).RemoveURL(Url.Action("InlineDelete", "Bank")).InsertURL(Url.Action("InlineInsert", "Bank")).UpdateURL(Url.Action("InlineInsert", "Bank"))
                       .Adaptor(AdaptorType.RemoteSaveAdaptor).Offline(false))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.InlineFormTemplate).InlineFormTemplateID("#template").ShowDeleteConfirmDialog(true); })
        .EnableAltRow().AllowPaging()
        .PageSettings(p => { p.PageSize(10); })
        .EnableAltRow()

        .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
        {
            items.AddTool(ToolBarItems.Add);
            items.AddTool(ToolBarItems.Edit);
            items.AddTool(ToolBarItems.Update);
            items.AddTool(ToolBarItems.Cancel);
            items.AddTool(ToolBarItems.ExcelExport);
            items.AddTool(ToolBarItems.PrintGrid);
        }))
        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "Generic",new {ctrlname= "Bank" })))
        .AllowSorting()
        .AllowPaging()
        .IsResponsive()
        .AllowFiltering()
        .ShowColumnChooser()
        .AllowReordering()
        .AllowScrolling()
        .ScrollSettings(col => { col.Width("100%"); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .Columns(col =>
        {
            col.Field("bank_id").Width("15%").HeaderText("ID").IsPrimaryKey(true).Visible(false).Width(80).Add();
            col.Field("bank_code").Width("15%").HeaderText("Bank Code").ValidationRules(val => val.AddRule("required", true)).Add();
            col.Field("bank_name").Width("15%").HeaderText("Bank Description").ValidationRules(val => val.AddRule("required", true)).Add();
            col.Field("is_blocked").Width("15%").HeaderText("Blocked").Visible(false).Add();


        }).ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
    )
</div>
<script id="template" type="text/template">
        <div class="row">

            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="hidden" id="bank_id" name="bank_id" value="{{: bank_id}}" class="form-control" />
            </div>
        </div>
 
    <div class="row">
        <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
            Bank Code *
        </div>
        <div class="col-lg-6 col-md-6 col-xs-12">
            <input type="text" id="bank_code" name="bank_code" value="{{: bank_code}}" class="form-control" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
            Bank Description *
        </div>
        <div class="col-lg-6 col-md-6 col-xs-12">
            <input type="text" id="bank_name" name="bank_name" value="{{: bank_name}}" class="form-control" />
        </div>
    </div>
    <br />
    <div class="row">

        <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
            Blocked
        </div>
        <div class="col-lg-2 col-md-2 col-sm-12 col-xs-12">
            <input type="checkbox" name="is_blocked" value="{{:is_blocked}}" class="form-control" id="is_blocked">
        </div>


    </div>
</script>
<script type="text/javascript">
    var flag = true;
    function complete(args) {
        if (args.requestType == "add") {
            $('#is_blocked').checkboxpicker();
        }
        if (args.requestType == "beginedit") {
            document.getElementById('bank_name').setAttribute('disabled', 'disabled');
            document.getElementById('bank_code').setAttribute('disabled', 'disabled');
            if (args.rowData.is_blocked == true) {
                document.getElementById("is_blocked").setAttribute('checked', 'checked');
            }

            else {
                document.getElementById("is_blocked").removeAttribute('checked');
            }
            $('#is_blocked').checkboxpicker();
        }
        if (args.requestType == "save") {
            if (args.data.text == 'duplicate') {
                sweetAlert("", "Bank already exists!", "error");
                if (args.model.dataSource.dataSource.json[0].bank_id == null) {
                    args.model.dataSource.dataSource.json = args.model.dataSource.dataSource.json.splice(1, args.model.dataSource.dataSource.json.length);
                }
            }
            var gridObj = $("#Grid").ejGrid("instance");
            gridObj.refreshContent();
        }
    }

    function EndProcess() {
        var gridObj = $("#Grid").ejGrid("instance");
        gridObj.refreshContent();
    }
</script>
