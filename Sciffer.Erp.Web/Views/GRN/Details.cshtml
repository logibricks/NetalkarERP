@model Sciffer.Erp.Domain.ViewModel.pur_grnVM
@using Newtonsoft.Json
@{
    ViewBag.Title = "Create";
}
@using (Html.BeginForm("Create", "GRN", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal" style="margin-top:10px;">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.grn_id)
        <div class="form-group">
            <div class="row">
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.po_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.DropDownList("po_id", (System.Web.Mvc.SelectList)ViewBag.po_list, new { @class = "form-control removedisabled", @disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.po_id, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.category_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-5 col-sm-5 col-xs-12">
                            @Html.DropDownList("category_id", (System.Web.Mvc.SelectList)ViewBag.category_list, new { @class = "form-control validinput", @required = true, @onchange = "GetDocumentNumber(this.value);" })
                            @Html.ValidationMessageFor(model => model.category_id, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-12">
                            @Html.EditorFor(model => model.grn_number, new { htmlAttributes = new { @class = "form-control  num validinput removedisabled", @disabled = "disabled", @required = true } })
                            @Html.ValidationMessageFor(model => model.grn_number, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.posting_date, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.EditorFor(model => model.posting_date, new { htmlAttributes = new { @class = "form-control " } })
                            @Html.ValidationMessageFor(model => model.posting_date, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.vendor_id, "Vendor *", htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-8 col-sm-8 col-xs-12">
                            @Html.DropDownList("vendor_id", (System.Web.Mvc.SelectList)ViewBag.vendor_list, "---Select---", new { @class = "form-control validinput removedisabled", @disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.vendor_id, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.net_value, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-5 col-sm-5 col-xs-12">
                            @Html.EditorFor(model => model.net_value, new { htmlAttributes = new { @class = "form-control pull-right  removedisabled", @disabled = "disabled", @type = "number" } })
                            @Html.ValidationMessageFor(model => model.net_value, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-12">
                            @Html.DropDownList("net_currency_id", (System.Web.Mvc.SelectList)ViewBag.currency_list, new { @class = "form-control removedisabled", @disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.net_currency_id, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.gross_value, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                        <div class="col-md-5 col-sm-5 col-xs-12">
                            @Html.EditorFor(model => model.gross_value, new { htmlAttributes = new { @class = "form-control pull-right removedisabled", @disabled = "disabled", @type = "number" } })
                            @Html.ValidationMessageFor(model => model.gross_value, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3 col-sm-3 col-xs-12">
                            @Html.DropDownList("gross_currency_id", (System.Web.Mvc.SelectList)ViewBag.currency_list, new { @class = "form-control removedisabled", @disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.gross_currency_id, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="panel panel-body" role="tabpanel" data-example-id="togglable-tabs">
            <ul id="myTab" class="nav nav-tabs bar_tabs" role="tablist">
                <li class="active"><a data-toggle="tab" href="#sectionA">General</a></li>
                <li><a data-toggle="tab" href="#sectionB">Line Item</a></li>
                <li><a data-toggle="tab" href="#sectionC">Vendor</a></li>
                <li><a data-toggle="tab" href="#sectionD">Accounting</a></li>
                <li><a data-toggle="tab" href="#sectionE">Status</a></li>
                <li><a data-toggle="tab" href="#sectionF">Information</a></li>
            </ul>
            <div class="tab-content">
                <div id="sectionA" class="tab-pane fade in active" style="margin-top:10px;">
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.business_unit_id, "Business Unit *", htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.DropDownList("business_unit_id", (System.Web.Mvc.SelectList)ViewBag.business_list, "---Select---", new { @class = "form-control removedisabled", @disabled = "disabled", })
                                    @Html.ValidationMessageFor(model => model.business_unit_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.plant_id, "Plant *", htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.DropDownList("plant_id", (System.Web.Mvc.SelectList)ViewBag.plant_list, "---Select---", new { @class = "form-control removedisabled", @disabled = "disabled", @onchange = "GetStorageLocation(this.value)" })
                                    @Html.ValidationMessageFor(model => model.plant_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.freight_terms_id, "Freight Terms *", htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.DropDownList("freight_terms_id", (System.Web.Mvc.SelectList)ViewBag.freight_list, "---Select---", new { @class = "form-control removedisabled", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.freight_terms_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.delivery_date, "Delivery Date *", htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.EditorFor(model => model.delivery_date, new { htmlAttributes = new { @class = "form-control validinput" } })
                                    @Html.ValidationMessageFor(model => model.delivery_date, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.vendor_doc_no, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.EditorFor(model => model.vendor_doc_no, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.vendor_doc_no, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.vendor_doc_date, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.EditorFor(model => model.vendor_doc_date, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.vendor_doc_date, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.gate_entry_number, "Gate Entry Number", htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.EditorFor(model => model.gate_entry_number, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.gate_entry_number, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.gate_entry_date, "Gate Entry Date", htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.EditorFor(model => model.gate_entry_date, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.gate_entry_date, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.form_id, "GRN Against Form", htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.DropDownList("form_id", (System.Web.Mvc.SelectList)ViewBag.form_list, "---Select---", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.form_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div id="sectionB" class="tab-pane fade" style="margin-top:10px;">
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">

                            </div>
                        </div>
                        @*<div class="col-lg-6 col-sm-6">
                                <div class="form-group">
                                    <div class="col-md-12 col-sm-12 col-xs-12">
                                        <button type="button" class="btn btn-primary" style="float:right" data-toggle="modal" data-target="#myModal"><span class="glyphicon glyphicon-plus"></span>Add Item</button>
                                    </div>
                                </div>
                            </div>*@
                    </div>
                    <div class="row">
                        <div class="table-responsive">
                            <table class="table table-responsive table-bordered table-striped" id="ContactGrid">
                                <thead>
                                    <tr>
                                        <th hidden><label>ID</label></th>
                                        <th><label>SR No.</label></th>
                                        <th hidden><label>Item ID</label></th>
                                        <th><label>Item</label></th>
                                        <th><label>User Description</label></th>
                                        <th hidden><label>Storage Location ID</label></th>
                                        <th hidden><label>Storage Location</label></th>
                                        <th><label>Delivery Date</label></th>
                                        <th><label>Quantity</label></th>
                                        <th hidden><label>UOM ID</label></th>
                                        <th><label>UOM</label></th>
                                        <th><label>Unit Price</label></th>
                                        <th><label>Discount</label></th>
                                        <th><label>Eff. Price</label></th>
                                        <th hidden><label>Purchase Value</label></th>
                                        <th hidden><label>Assessable Rate</label></th>
                                        <th hidden><label>Assessable Value</label></th>
                                        <th hidden><label>Tax ID</label></th>
                                        <th><label>Tax Code</label></th>
                                        <th hidden><label>Po Detail ID</label></th>
                                        <th hidden><label>Batch Managed</label></th>
                                        <th><label>Batch</label></th>
                                        <th hidden><label>Bucket ID</label></th>
                                        <th hidden><label>Bucket</label></th>
                                        <th><label>SHED</label></th>
                                    </tr>
                                </thead>

                            </table>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">

                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="table-responsive">
                                <table class="table table-responsive table-bordered table-striped" id="TaxGrid"></table>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="sectionC" class="tab-pane fade" style="margin-top:10px;">

                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.country_id, "Country *", htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.DropDownList("country_id", (System.Web.Mvc.SelectList)ViewBag.country_list, "---Select---", new { @class = "form-control removedisabled", @disabled = "disabled", })
                                    @Html.ValidationMessageFor(model => model.country_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.billing_state_id, "State *", htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.DropDownList("billing_state_id", (System.Web.Mvc.SelectList)ViewBag.state_list, "---Select---", new { @class = "form-control removedisabled", @disabled = "disabled", })
                                    @Html.ValidationMessageFor(model => model.billing_state_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.billing_address, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.EditorFor(model => model.billing_address, new { htmlAttributes = new { @class = "form-control ddlform removedisabled", @disabled = "disabled" } })
                                    @Html.ValidationMessageFor(model => model.billing_address, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.billing_city, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.EditorFor(model => model.billing_city, new { htmlAttributes = new { @class = "form-control ddlform removedisabled", @disabled = "disabled" } })
                                    @Html.ValidationMessageFor(model => model.billing_city, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.billing_pin_code, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.EditorFor(model => model.billing_pin_code, new { htmlAttributes = new { @class = "form-control ddlform" } })
                                    @Html.ValidationMessageFor(model => model.billing_pin_code, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.email_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.EditorFor(model => model.email_id, new { htmlAttributes = new { @class = "form-control ddlform" } })
                                    @Html.ValidationMessageFor(model => model.email_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="sectionD" class="tab-pane fade" style="margin-top:10px;">
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.payment_cycle_type_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.DropDownList("payment_cycle_type_id", (System.Web.Mvc.SelectList)ViewBag.payment_cycle_type_list, "---Select---", new { @class = "form-control validinput removedisabled", @disabled = "disabled", @required = true, @onchange = "FillPaymentCycle()" })
                                    @Html.ValidationMessageFor(model => model.payment_cycle_type_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.payment_cycle_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.DropDownList("payment_cycle_id", (System.Web.Mvc.SelectList)ViewBag.payment_cycle_list, "---Select---", new { @class = "form-control validinput removedisabled", @disabled = "disabled", @required = true })
                                    @Html.ValidationMessageFor(model => model.payment_cycle_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.payment_terms_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.DropDownList("payment_terms_id", (System.Web.Mvc.SelectList)ViewBag.payment_terms_list, "---Select---", new { @class = "form-control validinput removedisabled", @disabled = "disabled", @required = true })
                                    @Html.ValidationMessageFor(model => model.payment_terms_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.gst_no, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.gst_no, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.gst_no, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.pan_no, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.pan_no, new { htmlAttributes = new { @class = "form-control pan validinput removedisabled", @disabled = "disabled", @required = true } })
                                    @Html.ValidationMessageFor(model => model.pan_no, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ecc_no, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.ecc_no, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ecc_no, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.vat_tin_no, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.vat_tin_no, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.vat_tin_no, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.cst_tin_no, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.cst_tin_no, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.cst_tin_no, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.service_tax_no, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.service_tax_no, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.service_tax_no, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div id="sectionE" class="tab-pane fade" style="margin-top:10px;">
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.status_id, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.DropDownList("status_id", (System.Web.Mvc.SelectList)ViewBag.status_list, null, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.status_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div id="sectionF" class="tab-pane fade" style="margin-top:10px;">
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.internal_remarks, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.EditorFor(model => model.internal_remarks, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.internal_remarks, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.remarks_on_doc, htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.EditorFor(model => model.remarks_on_doc, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.remarks_on_doc, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <input type="hidden" id="productdetail" name="productdetail" />
                        <input type="hidden" id="attributedetail" name="attributedetail" />
                        <input type="hidden" id="formdetail" name="formdetail" />
                        <input type="hidden" id="deleteids" name="deleteids" />
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.attachment, "Attachment", htmlAttributes: new { @class = "control-label col-md-4 col-sm-4 col-xs-12" })
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    <input type="file" class="form-control" id="FileUpload" name="FileUpload" accept="application/pdf, image/*" />
                                    @Html.ValidationMessageFor(model => model.attachment, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">

                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Items Detail</h4>
                </div>
                <div class="modal-body">

                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3">
                                Item <span class="required">*</span>
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownList("item_id", (System.Web.Mvc.SelectList)ViewBag.item_list, "---Select---", new { @class = "form-control col-md-7 col-xs-12 removedisabled", @disabled = "disabled" })
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3" for="first-name">
                                User Description <span class="required">*</span>
                            </label>
                            <div class="col-md-7">
                                <input type="text" class="form-control col-md-7 col-xs-12" id="user_description" readonly="readonly">
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3">
                                Delivery Date <span class="required">*</span>
                            </label>
                            <div class="col-md-7">
                                <input type="date" class="form-control col-md-7 col-xs-12" id="dte" readonly="readonly">
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3">
                                Storage Location <span class="required">*</span>
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownList("storage_location_id", Enumerable.Empty<SelectListItem>(), "---Select---", new { @class = "form-control col-md-7 col-xs-12", @style = "width: 100%;", @disabled = "disabled" })
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3" for="first-name">
                                Quantity <span class="required">*</span>
                            </label>
                            <div class="col-md-4">
                                <input type="number" class="form-control col-md-7 col-xs-12" id="quantity" onchange="calculation()">
                            </div>
                            <div class="col-md-3">
                                @Html.DropDownList("uom_id", (System.Web.Mvc.SelectList)ViewBag.uom_list, "---Select---", new { @class = "form-control col-md-7 col-xs-12", @disabled = "disabled" })
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3" for="first-name">
                                Unit Price <span class="required">*</span>
                            </label>
                            <div class="col-md-7">
                                <input type="number" class="form-control col-md-7 col-xs-12" readonly="readonly" id="unitprice" onchange="calculation()">
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3" for="first-name">
                                Discount (%) <span class="required"></span>
                            </label>
                            <div class="col-md-7">
                                <input type="number" min="0" max="3" class="form-control col-md-7 col-xs-12" readonly="readonly" id="discount" onchange="calculation()">
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3" for="first-name">
                                Effective Unit Price <span class="required">*</span>
                            </label>
                            <div class="col-md-7">
                                <input type="number" class="form-control col-md-7 col-xs-12" id="effectiveprice" readonly="readonly">
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3" for="first-name">
                                Purchase Value <span class="required">*</span>
                            </label>
                            <div class="col-md-7">
                                <input type="number" class="form-control col-md-7 col-xs-12" id="salesvalue" readonly="readonly">
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3" for="first-name">
                                Assessable Rate <span class="required"></span>
                            </label>
                            <div class="col-md-7">
                                <input type="number" class="form-control col-md-7 col-xs-12" id="assessablerate" readonly="readonly" onchange="asscalculation()">
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3" for="first-name">
                                Assessable Value <span class="required">*</span>
                            </label>
                            <div class="col-md-7">
                                <input type="number" class="form-control col-md-7 col-xs-12" readonly="readonly" id="assessablevalue">
                            </div>
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3" for="first-name">
                                Tax Code <span class="required">*</span>
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownList("tax_id", (System.Web.Mvc.SelectList)ViewBag.tax_list, "---Select---", new { @class = "form-control col-md-7 col-xs-12", @disabled = "disabled" })
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3">
                                Batch <span class="required">*</span>
                            </label>
                            <div class="col-md-7">
                                <input type="text" id="batch" name="batch" class="form-control col-md-7 col-xs-12" readonly="readonly" />
                                @* @Html.DropDownList("batch_id", (System.Web.Mvc.SelectList)ViewBag.batchList, "---Select---", new { @class = "form-control col-md-7 col-xs-12" })*@
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <label class="control-label col-md-3">
                                Bucket <span class="required">*</span>
                            </label>
                            <div class="col-md-7">
                                @Html.DropDownList("bucket_id", (System.Web.Mvc.SelectList)ViewBag.bucketList, "---Select---", new { @class = "form-control col-md-7 col-xs-12" })
                            </div>
                        </div>
                    </div>
                </div>
                <br />
                <div class="modal-footer">
                    <input type="hidden" id="srno" />
                    <input type="hidden" id="detailid" />
                    <input type="hidden" id="po_detail_id" name="po_detail_id" />
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="clearmodel();">Close</button>
                    <button type="button" class="add btn btn-primary">Add Item</button>
                    <input type="hidden" id="batch_managed" />
                </div>
            </div>

        </div>
    </div>
    <div class="modal fade" id="myModal1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content" style="align-content:center;width:900px">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Purchase Order</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                <label class="control-label col-md-4">
                                    Vendor
                                </label>
                                <div class="col-md-8 col-sm-8 col-xs-12">
                                    @Html.DropDownList("vendor_id1", (System.Web.Mvc.SelectList)ViewBag.vendor_list, "---Select---", new { @class = "form-control", @onchange = "GetPOList(this.value);" })
                                    @Html.ValidationMessageFor(model => model.vendor_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-6">
                            <div class="form-group">
                                <label class="control-label col-md-3">
                                    Purchase Order
                                </label>
                                <div class="col-md-9 col-sm-9 col-xs-12">
                                    @Html.DropDownList("po_id1", Enumerable.Empty<SelectListItem>(), "---Select---", new { @class = "form-control", @onchange = "GetQuotationProduct(this.value);" })
                                    @Html.ValidationMessageFor(model => model.vendor_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="form-group">
                            <div class="table-responsive">
                                <table class="table table-responsive table-bordered table-striped" id="pogrid">
                                    <thead>
                                        <tr>
                                            <th hidden><label>ID</label></th>
                                            <th><label>Sr. No.</label></th>
                                            <th hidden><label>Item Code</label></th>
                                            <th><label>Item</label></th>
                                            <th hidden><label>Delivery Date</label></th>
                                            <th><label>Quantity</label></th>
                                            <th hidden><label>UOM ID</label></th>
                                            <th><label>UOM</label></th>
                                            <th><label>Unit Price</label></th>
                                            <th><label>Discount</label></th>
                                            <th><label>Eff. Price</label></th>
                                            <th><label>Purchase Value</label></th>
                                            <th hidden><label>Assessable Rate</label></th>
                                            <th hidden><label>Assessable Value</label></th>
                                            <th hidden><label>Tax Code</label></th>
                                            <th><label>Balance Quantity</label></th>
                                            <th hidden><label>Tax Name</label></th>
                                            <th hidden><label>storage location id</label></th>
                                            <th hidden><label>Storage Location</label></th>
                                            <th hidden><label>PO Detail ID</label></th>
                                            <th hidden><label>User Description</label></th>
                                            <th><label>GRN Quantity</label></th>
                                            <th hidden><label>Batch Managed</label></th>
                                            <th hidden><label>Quality Managed</label></th>
                                            <th hidden><label>Auto batch</label></th>
                                            <th hidden><label>Bucket</label></th>
                                            <th><label>Batch Number</label></th>
                                            <th hidden><label>Item Category</label></th>
                                            <th hidden><label>Flag Check</label></th>
                                            <th><input type="checkbox" name="select_all" value="1" id="example-select-all"></th>
                                        </tr>
                                    </thead>

                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="addSALES btn btn-primary" disabled="disabled">Add</button>
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/RemoveUnexpectedFile.js"></script>
    <script src="~/Scripts/requirevalidation.js"></script>
    <script type="text/javascript">
        //$(document).ready(function () {
        //    document.getElementById('posting_date').valueAsDate = new Date();
        //    document.getElementById('vendor_doc_date').valueAsDate = new Date();
        //    document.getElementById('delivery_date').valueAsDate = new Date();
        //    document.getElementById('gate_entry_date').valueAsDate = new Date();
        //    GetDocumentNumber($('#category_id').val());
        //    $("#vendor_id1").select2({
        //        placeholder: "Select Vendor",
        //        allowClear: true
        //    });
        //    $("#po_id1").select2({
        //        placeholder: "Select Purchase Order",
        //        allowClear: true
        //    });
        //});
        $(document).ready(function(){
            var t = $('#ContactGrid').DataTable();
            var t1=$('#AttributeGrid').DataTable();
            var sr_no = t.fnGetData().length+1;
            var pl_detail = @Html.Raw(JsonConvert.SerializeObject(this.Model));
            console.log(pl_detail);
            GetStorageLocation(pl_detail.plant_id);
            var i=1;
            var str="";
            var str1="";
            var tot = 0;
            $.each(pl_detail.pur_grn_detail, function(key, value) {
                console.log(value);
                var input = value.delivery_date;
                var result = input.substring(0, 10);

                var bucket;
                if(value.bucket_id == 1){
                    bucket = "Quality";
                }
                else  if(value.bucket_id == 2){
                    bucket = "Free";
                }
                else{
                    bucket = "Blocked";
                }
                var d1 = value.expirary_date;
                var month = new Date(d1).getMonth() + 1;
                if (month < 10) {
                    month = '0' + month;
                }
                var date = new Date(d1).getDate();
                if (date < 10) {
                    date = '0' + date;
                }
                t.fnAddData([value.grn_detail_id,i,value.REF_ITEM.ITEM_ID,value.REF_ITEM.ITEM_NAME,value.user_description,value.storage_location_id,
                    value.REF_STORAGE_LOCATION.storage_location_name,result, value.quantity, value.REF_UOM.UOM_ID, value.REF_UOM.UOM_NAME,
                    value.unit_price, value.discount, value.eff_unit_price, value.purchase_value, value.assessable_rate, value.assessable_value,
                    value.tax_id,value.REF_TAX.tax_code,value.po_detail_id,value.batch_managed,value.batch,value.bucket_id,bucket,d1,''
                ]);
                str1 =value.tax_id + "~";
                str1 = str1 + value.assessable_value + "~";
                str1 = str1 + value.purchase_value;
                if (i == 0) {
                    str = str1 + ","
                }
                else {
                    str = str + str1 + ",";
                }

                tot = tot + parseFloat(value.purchase_value);
                i=i+1;
            });
            $.each(pl_detail.pur_grn_form, function(key, value) {
                $("#form_id").val(value.form_id)
            });
            GetTaxDetail(str.slice(0, -1), tot, $("#posting_date").val());

        });

        function JSONDate(dateStr) {
            var m, day;
            jsonDate = dateStr;
            var d = new Date(parseInt(jsonDate.substr(6)));
            m = d.getMonth() + 1;
            if (m < 10)
                m = '0' + m
            if (d.getDate() < 10)
                day = '0' + d.getDate()
            else
                day = d.getDate();
            return (d.getFullYear() + '/' + m + '/' + day);
        }

        function GetQuotationProduct(poid) {
            var t = $('#pogrid').DataTable();
            t.fnClearTable();
            if (poid == "") {
                poid = 0;
            }
            var rowCount = t.fnGetData().length;
            var i = 1;
            $.ajax({
                url: '/GRN/GetPOProductForGRN',
                type: "GET",
                dataType: "JSON",
                data: { id: poid },
                success: function (poid) {

                    $.each(poid, function (key, cycle) {
                       // console.log(cycle);
                        var auto_batch, BucketName;
                        if (cycle.BATCH_MANAGED == true) {
                            if (cycle.auto_batch == 1) {
                                auto_batch = "Auto";
                            }
                            else {
                                auto_batch = "Manual";
                            }
                        }
                        else {
                            auto_batch = "";
                        }
                        if (cycle.QUALITY_MANAGED == true) {
                            BucketName = "Quality";
                        }
                        else {
                            BucketName = "Free";
                        }
                        var month = new Date(cycle.delivery_date).getMonth() + 1;
                        if (month < 10) {
                            month = '0' + month;
                        }
                        if (cycle.user_description == "") {
                            cycle.user_description = cycle.item_name;
                        }
                        var d = new Date(cycle.delivery_date).getFullYear() + "-" + month + "-" + new Date(cycle.delivery_date).getDate();
                        t.fnAddData([cycle.po_id, i, cycle.item_id, cycle.item_name, d, cycle.quantity, cycle.uom_id, cycle.uom_name, cycle.unit_price,
                            cycle.discount, cycle.eff_unit_price, cycle.purchase_value, cycle.assesable_rate, cycle.assesable_value, cycle.tax_code_id,
                            cycle.balance_quantity, cycle.tax_name, cycle.sloc_id, cycle.sloc_name, cycle.po_detail_id, cycle.user_description,
                            '<input type="number" id="txt' + i + '" class="form-control" />', cycle.BATCH_MANAGED, cycle.QUALITY_MANAGED, auto_batch, BucketName,
                            '<input type="text" id="batch' + i + '" class="form-control" style="width:100px;" />', cycle.ITEM_CATEGORY_ID,
                            '<input type="text" id="flag' + i + '" class="form-control" style="width:100px;" />', ''
                        ]);
                        if (cycle.BATCH_MANAGED == true) {
                            if (cycle.auto_batch == 1) {
                                //$("#batch" + i).prop('disabled', true);
                                CheckBatchNumbering(cycle.ITEM_CATEGORY_ID, cycle.plant_id, i);
                            }
                            else {
                                $("#batch" + i).addClass('Manual');
                            }
                        }
                        else {
                            $("#batch" + i).prop('disabled', true);
                        }
                        i = i + 1;
                    });

                }
            });

        }

        function CheckBatchNumbering(ITEM_CATEGORY_ID, plant_id, i) {
            $.ajax({
                type: 'GET',
                url: '/GRN/GetBatchNumering',
                data: { item_category: ITEM_CATEGORY_ID, plant_id: plant_id },
                async: false,
                success: function (data) {
                    if (data) {
                        //swal("", "Batch Numbering not Exist.", "error");
                        $("#batch" + i).prop('disabled', true);
                        // $("#txt" + i).prop('disabled', true);
                        $("#batch" + i).addClass("BatchTrue");
                        // return 1;
                    }
                    else {
                        $("#batch" + i).prop('disabled', true);
                        //  $("#txt" + i).prop('disabled', true);
                        $("#batch" + i).addClass("BatchFalse");
                    }
                }
            });
        }

        $('#example-select-all').on('click', function () {
            if ($(this).hasClass('allChecked')) {
                $('input[type="checkbox"]', '#pogrid').prop('checked', false);
            } else {
                $('input[type="checkbox"]', '#pogrid').prop('checked', true);
            }
            $(this).toggleClass('allChecked');
        });
        $(document).on('change', 'input[type="checkbox"]', function () {
            if ($('.check').is(':checked')) {
                $('.addSALES ').removeAttr('disabled');
            }
            else {
                $('.addSALES ').attr('disabled', true);
            }
        });
        $('#salesbutton').click(function () {
            $('.addSALES ').attr('disabled', true);
        });
        $('#pogrid').DataTable({
            "bPaginate": false,
            "ordering": false,
            "bfooter": false,
            "info": false,
            "bLengthChange": false,
            "bAutoWidth": false,

            columnDefs: [{
                orderable: false,
                className: 'select-checkbox',
                targets: 15
            }],
            aoColumns: [
                     { sname: "a", bVisible: false },
                     { sname: "b", bVisible: true },
                     { sname: "c", bVisible: false },
                     { sname: "d" },
                     { sname: "e", sWidth: "11%", bVisible: false },
                     { sname: "f", sWidth: "8%" },
                     { sname: "g", bVisible: false },
                     { sname: "h", sWidth: "8%" },
                     { sname: "i", sWidth: "8%" },
                     { sname: "j", bVisible: true },
                     { sname: "k", bVisible: true },
                     { sname: "l", sWidth: "11%", sClass: "alignRight" },
                     { sname: "m", bVisible: false },
                     { sname: "n", bVisible: false },
                     { sname: "o", bVisible: false },
                     { sname: "p", sWidth: "11%" },
                     { sname: "q", bVisible: false },
                     { sname: "r", bVisible: false },
                     { sname: "s", bVisible: false },
                     { sname: "t", bVisible: false },
                     { sname: "u", sWidth: "11%", bVisible: false },
                     { sname: "v", sWidth: "11%", bVisible: true },
                     { sname: "w", bVisible: false },
                     { sname: "x", bVisible: false },
                     { sname: "y", bVisible: false },
                     { sname: "z", bVisible: false },
                     { sname: "z", bVisible: true },
                     { sname: "1", bVisible: false },
                     { sname: "2", bVisible: false },
                     {
                         sname: "3", sWidth: "2%",
                         mRender: function (data, type, row) {
                             return '<input type="checkbox" class="check" name="id[]" value="' + $('<div/>').text(data).html() + '">';
                         }
                     }]
        });
        $(".add").on("click", function (event) {
            var t = $('#ContactGrid').DataTable()
            var rowCount = t.fnGetData().length;
            var sr_no = t.fnGetData().length + 1;
            var item_id = $("#item_id").val();
            var item_code = $("#item_id :selected").text();
            var delevery_date = $("#dte").val();
            var qty = $("#quantity").val();
            var balanceQuantity = $('#balanceQuantity').val();
            var batch_managed = $("#batch_managed").val();
            var unit_id = $("#uom_id").val();
            var unit_name = $("#uom_id").find("option:selected").text();
            var unit_price = $("#unitprice").val();
            var discount = $("#discount").val();
            var effectiveprice = $("#effectiveprice").val();
            var salesvalue = $("#salesvalue").val();
            var assessablerate = $("#assessablerate").val();
            var assessablevalue = $("#assessablevalue").val();
            var assignment = $('#account_assignment_id').val();
            var taxid = $("#tax_id").val();
            var taxcode = $("#tax_id :selected").text();
            var storage_id = $('#storage_location_id').val();
            var storage_name = $('#storage_location_id :selected').text();
            var user_description = $("#user_description").val();
            var batch_id = $("#batch").val();
            var bucket_id = $("#bucket_id").val();
            var bucket = $("#bucket_id :selected").text();
            var po_detail = $('#po_detail_id').val();
            if (item_id == '') {
                swal("", "Please Select Item Name.", "error");
                return false;
            }
            if (delevery_date == '') {
                swal("", "Please Select Delivery Date.", "error");
                return false;
            }
            if (qty == '') {
                swal("", "Please Enter Quantity.", "error");
                return false;
            }
            if (qty == 0) {
                swal("", "Quantity should be greater than zero.", "error");
                return false;
            }
            if (unit_id == '') {
                swal("", "Please select Unit.", "error");
                return false;
            }
            if (unit_price == '') {
                swal("", "Please enter unit price.", "error");
                return false;
            }
            if (taxcode == '') {
                swal("", "Please select tax code.", "error");
                return false;
            }

            if (bucket_id == '') {
                swal("", "Please select Bucket.", "error");
                return false;
            }
            if (parseFloat(balanceQuantity) < parseFloat(qty)) {
                swal("", "Quantity cannot be greater than Balance Quantity .", "error");
                return false;
            }
            if (discount == '') {
                discount = 0;
            }
            if ($("#srno").val() == "") {
                t.fnAddData(['', sr_no, item_id, item_code, user_description, storage_id, storage_name,
                    delevery_date, qty, unit_id, unit_name, unit_price, discount, effectiveprice,
                    salesvalue, assessablerate, assessablevalue, taxid, taxcode, po_detail, batch_managed,
                    batch_id, bucket_id, bucket, balanceQuantity, ''
                ]);
                sr_no + 1;
            }
            else {
                var cc = $("#srno").val();
                cc = parseInt(cc) - 1;
                t.fnUpdate(['', sr_no, item_id, item_code, user_description, storage_id, storage_name,
                    delevery_date, qty, unit_id, unit_name, unit_price, discount, effectiveprice,
                    salesvalue, assessablerate, assessablevalue, taxid, taxcode, po_detail, batch_managed,
                    batch_id, bucket_id, bucket, balanceQuantity, ''], cc)
            }

            clearmodel();
            getnetTotal();
            var rowCount = t.fnGetData().length;
            var str;
            var str1;
            var tot = 0;
            for (i = 0; i < rowCount; i++) {
                str1 = t.fnGetData(i)[17] + "~";
                str1 = str1 + t.fnGetData(i)[16] + "~";
                str1 = str1 + t.fnGetData(i)[14];
                if (i == 0) {
                    str = str1 + ","
                }
                else {
                    str = str + str1 + ",";
                }

                tot = tot + parseFloat(t.fnGetData(i)[14]);
            }
            GetTaxDetail(str.slice(0, -1), tot, $("#posting_date").val());
            return true;
        });
        function clearmodel() {
            $("#item_id").val('');
            $('#user_description').val('');
            $("#dte").val('');
            $("#quantity").val('');
            $("#uom_id").val('');
            $("#unitprice").val('');
            $("#discount").val('');
            $("#effectiveprice").val('');
            $("#salesvalue").val('');
            $("#assessablerate").val('');
            $("#assessablevalue").val('');
            $("#tax_id").val('');
            $("#assignment_id").val('');
            $("#srno").val('');
            $('#storage_location_id').val('');
            $('#bucket_id').val('');
            $('#batch').val('');
            $('#balanceQuantity').val('');
            $("#batch_managed").val('');

        }
        function calculation() {
            var quantity = $("#quantity").val();
            var unitprice = $("#unitprice").val();
            var discount = $("#discount").val();
            var assessable = $("#assessablerate").val();
            // alert(discount);
            var effectiveprice = 0;
            if (quantity == "") {
                quantity = 0;
            }
            if (unitprice == "") {
                unitprice = 0;
            }
            if (discount == "") {
                effectiveprice = unitprice;
            }
            else {
                effectiveprice = unitprice - (unitprice * discount / 100);
            }
            $("#effectiveprice").val(effectiveprice);
            $("#assessablerate").val(effectiveprice);
            $("#salesvalue").val(effectiveprice * quantity);
            //if (assessable=="")
            //{
            //    $("#assessablerate").val(effectiveprice);
            //}
            var assessable1 = $("#assessablerate").val();
            $("#assessablevalue").val(assessable1 * quantity);
        }
        function asscalculation() {
            var quantity = $("#quantity").val();
            var assessable1 = $("#assessablerate").val();
            $("#assessablevalue").val(assessable1 * quantity);
        }
        $('#ContactGrid').DataTable({
            "bPaginate": false,
            "ordering": false,
            "bfooter": false,
            "info": false,
            "bLengthChange": false,
            "bAutoWidth": false,
            "bFilter": false,
            "bSort": false,
            aoColumns: [
                     { sname: "a", bVisible: false },
                     { sname: "b", sWidth: "5%" },
                     { sname: "c", bVisible: false },
                     { sname: "d", },
                     { sname: "e", sWidth: "10%" },
                     { sname: "f", bVisible: false },
                     { sname: "g", bVisible: false },
                     { sname: "h", bVisible: true },
                     { sname: "i", sWidth: "8%" },
                     { sname: "j", bVisible: false },
                     { sname: "k", },
                     { sname: "l", sWidth: "10%", sClass: "alignRight" },
                     { sname: "m", bVisible: true },
                     { sname: "n", bVisible: true },
                     { sname: "o", sWidth: "8%", bVisible: false },
                     { sname: "P", bVisible: false },
                     { sname: "q", bVisible: false },
                     { sname: "r", bVisible: false },
                     { sname: "s", bVisible: true },
                     { sname: "t", bVisible: false },
                     { sname: "t", bVisible: false },
                     { sname: "u", bVisible: true },
                     { sname: "v", bVisible: false },
                     { sname: "w", bVisible: false },
                     { sname: "w", bVisible: true },
                    ]

        });
        function editRow() {
            $('#myModal').modal('show');
            var t = $('#ContactGrid').DataTable()
            var cc = parseInt(arguments[0]) - 1;
            $("#srno").val(t.fnGetData(cc)[1]);
            $("#item_id").val(t.fnGetData(cc)[2]).trigger("change");
            //$("#item_id").val(t.fnGetData(cc)[3] + "-" + t.fnGetData(cc)[3]);
            $('#user_description').val(t.fnGetData(cc)[4]);
            $('#storage_location_id').val(t.fnGetData(cc)[5]);
            $('#dte').val(t.fnGetData(cc)[7]);
            $('#quantity').val(t.fnGetData(cc)[8]);
            $('#uom_id').val(t.fnGetData(cc)[9]);
            $('#unitprice').val(t.fnGetData(cc)[11]);
            $('#discount').val(t.fnGetData(cc)[12]);
            $('#effectiveprice').val(t.fnGetData(cc)[13]);
            $('#salesvalue').val(t.fnGetData(cc)[14]);
            $('#assessablerate').val(t.fnGetData(cc)[15]);
            $('#assessablevalue').val(t.fnGetData(cc)[16]);
            $('#tax_id').val(t.fnGetData(cc)[17]);
            $('#po_detail_id').val(t.fnGetData(cc)[19]);
            $('#batch').val(t.fnGetData(cc)[21]);
            $('#balanceQuantity').val(t.fnGetData(cc)[24]);
            $("#batch_managed").val(t.fnGetData(cc)[20]);
            console.log(t.fnGetData(cc)[22]);
            if (t.fnGetData(cc)[22] == 1) {
                $('#bucket_id').val(t.fnGetData(cc)[22]);
                $('#bucket_id').prop("disabled","disabled")
            }
            else {
                $('#bucket_id').val(t.fnGetData(cc)[22]);
                $("#bucket_id option[value=1]").remove();
                $('#bucket_id').prop("disabled", "disabled")
            }
        }

        $('#ContactGrid').on('click', '.delete', function () {

            var t = $('#ContactGrid').DataTable();
            var id = $(this).parent('td').parent('tr').index();


            var deleteids = t.fnGetData(id)[1];
            swal({
                title: "Are you sure?",

                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                confirmButtonText: "Yes, delete it!",
                closeOnConfirm: true
            },
         function (isConfirm) {
             if (isConfirm) {

                 $("#deleteids").val(deleteids + "~");
                 t.fnDeleteRow(id);
                 getnetTotal();
                 var rowCount = t.fnGetData().length;
                 var str = "";
                 var str1 = "";
                 var tot = 0;
                 for (i = 0; i < rowCount; i++) {
                     str1 = t.fnGetData(i)[17] + "~";
                     str1 = str1 + t.fnGetData(i)[16] + "~";
                     str1 = str1 + t.fnGetData(i)[14];
                     if (i == 0) {
                         str = str1 + ","
                     }
                     else {
                         str = str + str1 + ",";
                     }
                     tot = tot + parseFloat(t.fnGetData(i)[14]);
                 }
                 GetTaxDetail(str.slice(0, -1), tot, $("#posting_date").val());
                 var len = t.fnGetData().length;
                 var i = 1;
                 var row = 0;
                 if (len > 0) {
                     $('#ContactGrid tbody tr').each(function () {
                         t.fnUpdate(i, row, 1);
                         i++;
                         row++;
                     });
                 }
             }
         });
        });
        function GetUnit(id) {
            //   var id = $("#item_id").val();
            if (id != '') {
                $.ajax({
                    type: 'GET',
                    url: '/Quotation/GetUnitofItem',
                    data: { id: id },
                    success: function (ITEM) {
                        $('#uom_id').val(ITEM.item.UOM_ID);
                    },
                    error: function (emp) {
                        $('#uom_id').val('');
                    }
                });
            }
            else {
                $('#uom_id').val('');
            }

        }
        function getnetTotal() {
            var t = $('#ContactGrid').DataTable()
            var rowCount = t.fnGetData().length;
            var total = 0;
            for (var i = 0; i < rowCount; i++) {

                total = total + parseFloat(t.fnGetData(i)[14]);
            }
            $("#net_value").val(total);
            $("#gross_value").val(total);
        }
        $("#purchaseorder").on("click", function (event) {
            var t = $('#pogrid').DataTable();
            t.fnClearTable();
            $("#po_number").val('').trigger("change");
            $('#myModal1').modal('show');
        })
        function TabletoJeson() {
            var t = $('#ContactGrid').DataTable()
            var rowCount = t.fnGetData().length;
            var str;
            var str1;
            //var t1 = $('#AttributeGrid').DataTable()
            //var rowCount1 = t1.fnGetData().length;
            var str2;
            var str3;
            for (i = 0; i < rowCount; i++) {
                str1 = t.fnGetData(i)[0] + ",";
                str1 = str1 + t.fnGetData(i)[1] + ",";
                str1 = str1 + t.fnGetData(i)[2] + ",";
                str1 = str1 + t.fnGetData(i)[3] + ",";
                str1 = str1 + t.fnGetData(i)[4] + ",";
                str1 = str1 + t.fnGetData(i)[5] + ",";
                str1 = str1 + t.fnGetData(i)[6] + ",";
                str1 = str1 + t.fnGetData(i)[7] + ",";
                str1 = str1 + t.fnGetData(i)[8] + ",";
                str1 = str1 + t.fnGetData(i)[9] + ",";
                str1 = str1 + t.fnGetData(i)[10] + ",";
                str1 = str1 + t.fnGetData(i)[11] + ",";
                str1 = str1 + t.fnGetData(i)[12] + ",";
                str1 = str1 + t.fnGetData(i)[13] + ",";
                str1 = str1 + t.fnGetData(i)[14] + ",";
                str1 = str1 + t.fnGetData(i)[15] + ",";
                str1 = str1 + t.fnGetData(i)[16] + ",";
                str1 = str1 + t.fnGetData(i)[17] + ",";
                str1 = str1 + t.fnGetData(i)[18] + ",";
                str1 = str1 + t.fnGetData(i)[19] + ",";
                str1 = str1 + t.fnGetData(i)[20] + ",";
                str1 = str1 + t.fnGetData(i)[21] + ",";
                str1 = str1 + t.fnGetData(i)[22] + ",";
                str1 = str1 + t.fnGetData(i)[23] + ",";
                str1 = str1 + t.fnGetData(i)[24] + ",";
                str1 = str1 + t.fnGetData(i)[25] + ",";
                str1 = str1 + t.fnGetData(i)[26] + ",";
                if (i == 0) {
                    str = str1 + "~"
                }
                else {
                    str = str + str1 + "~";
                }
            }
            document.getElementsByName("productdetail")[0].value = str;
            document.getElementsByName("formdetail")[0].value = $('#form_id').val();
        }



        // $('#storage_location_id').empty();
        // $('#storage_location_id').append('<option>--Select--</option>');
        function GetStorageLocation(id) {
            if (id == "") {
                id = 0;
            }
            $.ajax({
                url: '/Generic/GetStorageLocation',
                type: "GET",
                dataType: "JSON",
                data: { id: id },
                success: function (storage) {
                    $("#storage_location_id").html(""); // clear before appending new list
                    $("#storage_location_id").append($('<option></option>').val('').html("---Select---"));
                    $.each(storage, function (i, cycle) {
                        $("#storage_location_id").append(
                        $('<option></option>').val(cycle.storage_location_id).html(cycle.storage_location_name));
                    });
                }
            });
        }
        function GetPOList(id) {
            if (id == "") {
                id = 0;
            }
            $.ajax({
                url: '/Generic/GetPOByVendor',
                type: "GET",
                dataType: "JSON",
                data: { vendor_id: id },
                success: function (po) {
                    $("#po_id1").html(""); // clear before appending new list
                    $("#po_id1").append($('<option></option>').val(0).html("---Select---"));
                    $.each(po, function (i, cycle) {
                        $("#po_id1").append(
                        $('<option></option>').val(cycle.po_id).html(cycle.po_no));
                    });
                }
            });
        }
        function GetDocumentNumber(id) {
            if (id != '') {
                $.ajax({
                    type: 'GET',
                    url: '/Generic/GetDocumentNumbering',
                    data: { id: id },
                    success: function (ITEM) {
                        $('#grn_number').val(ITEM);
                    },
                    error: function (emp) {
                        $('#grn_number').val('');
                    }
                });
            }
            else {
                $('#grn_number').val('');
            }
        }
        $(".addSALES").on("click", function (event) {

            $("#po_id").html(""); // clear before appending new list
            $("#po_id").append($('<option></option>').val(0).html("---Select---"));
            $("#po_id").append(
                       $('<option></option>').val($("#po_id1").val()).html($("#po_id1 option:selected").text()));
            $("#po_id").val($("#po_id1").val());
            var tt = $("#po_id1").val();
            //console.log(tt);
            var s = $('#pogrid').DataTable()
            var t = $('#ContactGrid').DataTable()
            t.fnClearTable();
            var plant;
            $.ajax({
                type: 'GET',
                url: '/GRN/GetQuotationForGRN',
                data: { id: tt },
                success: function (soid) {
                   // console.log(soid);
                    $("#business_unit_id").val(soid.business_unit_id).trigger("change");
                    $("#freight_terms_id").val(soid.freight_terms_id);
                    $("#plant_id").val(soid.plant_id).trigger("change");
                    GetStorageLocation(soid.plant_id);
                    plant = soid.plant_id;
                    $("#vendor_id").val(soid.vendor_id);
                    $("#vendor_doc_no").val(soid.vendor_quotation_no);
                    var d3 = soid.vendor_quotation_date;
                    var month = new Date(d3).getMonth() + 1;
                    if (month < 10) {
                        month = '0' + month;
                    }
                    var date =  new Date(d3).getDate();
                    if (date < 10) {
                        date = '0' + date;
                    }
                    var d3 = new Date(d3).getFullYear() + "-" + month + "-" + date;
                    $("#vendor_doc_date").val(d3);
                    $("#billing_address").val(soid.billing_address);
                    $("#billing_city").val(soid.billing_city);
                    $("#country_id").val(soid.country_id);
                    $("#billing_state_id").val(soid.billing_state_id);
                    $("#email_id").val(soid.email_id);
                    $("#billing_pin_code").val(soid.billing_pin_code);
                    $("#gross_value_currency_id").val(soid.gross_value_currency_id);
                    $("#net_value_currency_id").val(soid.net_value_currency_id);
                    $("#payment_cycle_type_id").val(soid.payment_cycle_type_id);
                    $("#payment_cycle_id").val(soid.payment_cycle_id);
                    $("#payment_terms_id").val(soid.payment_terms_id).trigger("change");
                    $("#pan_no").val(soid.pan_no);
                    $("#gst_no").val(soid.gst_no);
                    $("#vat_tin_no").val(soid.vat_tin_no);
                    $("#ecc_no").val(soid.ecc_no);
                    $("#service_tax_no").val(soid.service_tax_no);
                    $("#cst_tin_no").val(soid.cst_tin_no);
                    $("#form_id").val(soid.FORM_ID);
                    $("#doc_currency_id").val(soid.doc_currency_id);
                    $("#internal_remarks").val(soid.internal_remarks);
                    $("#remarks_on_doc").val(soid.remarks_on_document);
                    var d1 = soid.delivery_date;
                    var month = new Date(d1).getMonth() + 1;
                    if (month < 10) {
                        month = '0' + month;
                    }
                    var date = new Date(d1).getDate();
                    if (date < 10) {
                        date = '0' + date;
                    }
                    var d1 = new Date(d1).getFullYear() + "-" + month + "-" + date;
                    $("#delivery_date").val(d1);

                },
                error: function (emp) {
                }
            });
            var i = 0;
            var checkGreater = 0;
            var checkEmpty = 0;
            var checkFlagInc = 0;
            var FlagBatch = 0;
            $('#pogrid').find('tbody').find('tr').each(function () {
                var row = $(this);
                if (row.find('input[type="checkbox"]').is(':checked')) {
                    var len = $('#pogrid').find('tbody').find('tr').length;
                    for (m = 1; m <= len; m++) {
                        var checkFlag = $('#batch' + m).hasClass("BatchFalse");
                        if (checkFlag == true) {
                            checkFlagInc = checkFlagInc + 1;
                        }
                    }
                    for (m = 1; m <= len; m++) {
                        var txt = $('#txt' + m).val();
                        if (parseFloat(txt) > s.fnGetData(m - 1)[15]) {
                            checkGreater = checkGreater + 1;
                        }
                    }
                    var checked = $('.check');
                    for (var d = 0; d <= $('.check').length - 1; d++) {
                        var ch = checked[d];
                        var txt = $('#txt' + (d + 1)).val();
                        var AddBatch = $('#batch' + (d + 1)).val();
                        if ($(ch).is(':checked')) {
                            if (txt == '') {
                                checkEmpty = checkEmpty + 1;
                            }
                        }
                        var manual = $('#batch' +(d+1)).hasClass("Manual");
                        if (AddBatch == "" && manual == true) {
                            FlagBatch = FlagBatch + 1;
                        }
                    }
                    var rowCount = t.fnGetData().length;
                    var txt = $('#txt' + (i + 1)).val();
                    if (checkGreater > 0) {
                        swal("", "GRN Quantity cannot be greater than Balance Quantity!", "error");
                        return false;
                    }
                    else if (checkEmpty > 0) {
                        swal("", "GRN Quantity cannot be left blank!", "error");
                        return false;
                    }
                    else if (checkFlagInc > 0) {
                        swal("", "Batch numbering not exist!", "error");
                        return false;
                    }
                    else if (FlagBatch > 0) {
                        swal("", "Batch cannot be left blank!", "error");
                        return false;
                    }
                    else {
                        if (s.fnGetData(i)[22] == true) {
                            if (s.fnGetData(i)[24] == "Manual") {
                                var batch = $("#batch" + (i + 1)).val();
                                item_category = s.fnGetData(i)[26];
                            }
                            else {
                                batch = "";
                            }
                        }
                        else {
                            batch = "";
                        }
                        if (s.fnGetData(i)[23] == true) {
                            var bucket_id = 1;
                            var bucket = "Quality";
                        }
                        else {
                            var bucket_id = 2;
                            var bucket = "Free";
                        }
                        var d1 = s.fnGetData(i)[4];
                        var month = new Date(d1).getMonth() + 1;
                        if (month < 10) {
                            month = '0' + month;
                        }
                        var date = new Date(d1).getDate();
                        if (date < 10) {
                            date = '0' + date;
                        }
                        var d1 = new Date(d1).getFullYear() + "-" + month + "-" + date;
                        t.fnAddData(['', rowCount + 1, s.fnGetData(i)[2], s.fnGetData(i)[3], s.fnGetData(i)[20], s.fnGetData(i)[17], s.fnGetData(i)[18],
                            d1, parseFloat(txt), s.fnGetData(i)[6], s.fnGetData(i)[7], s.fnGetData(i)[8], s.fnGetData(i)[9],
                            s.fnGetData(i)[10], (parseFloat(txt) * s.fnGetData(i)[10]).toFixed(), s.fnGetData(i)[12], (parseFloat(txt) * s.fnGetData(i)[12]).toFixed(),
                            s.fnGetData(i)[14], s.fnGetData(i)[16], s.fnGetData(i)[19],s.fnGetData(i)[22], batch, bucket_id, bucket, s.fnGetData(i)[15], ''
                        ]);
                    }
                    if (checkGreater < 1) {
                        if (checkEmpty < 1) {
                            if (checkFlagInc < 1) {
                                $('#myModal1').modal('hide');
                            }
                        }
                    }

                }
                i = i + 1;
                getnetTotal();
                var rowCount = t.fnGetData().length;
                var str="";
                var str1="";
                var tot = 0;
                for (j = 0; j < rowCount; j++) {
                    str1 = t.fnGetData(j)[17] + "~";
                    str1 = str1 + t.fnGetData(j)[16] + "~";
                    str1 = str1 + t.fnGetData(j)[14];
                    if (i == 0) {
                        str = str1 + ","
                    }
                    else {
                        str = str + str1 + ",";
                    }

                    tot = tot + parseFloat(t.fnGetData(j)[14]);
                }
                GetTaxDetail(str.slice(0, -1), tot, $("#posting_date").val());
                $("#po_id1").prop('selectedIndex', 0);
                $("#vendor_id1").prop('selectedIndex', 0);
            });
        });
        function GetTaxDetail(taxdetail, amount, dt) {
            $.ajax({
                url: '/Generic/GetTaxCalculation',
                type: "GET",
                dataType: "JSON",
                async: false,
                data: { st: taxdetail, amt: amount, dt: dt, tds_code_id: 0 },
                success: function (Payment_Cycle) {
                    $('#TaxGrid tbody').html('');
                    $.each(Payment_Cycle, function (i, cycle) {
                        $('#TaxGrid').append('<tbody>');
                        $('#TaxGrid').append('<tr><td>' + cycle.tax_name + '</td><td align="right">' + cycle.tax_value + '</td></tr>')
                        $('#TaxGrid').append('</tbody>');
                        $("#gross_value").val(cycle.tax_value);

                    });
                }
            });
        }
        $("#form0 :input").prop("disabled", true);
    </script>
}