@using Sciffer.Erp.Domain.Model
@{
    ViewBag.Title = "Index";
}
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
<br /><br /><br />
<div>
    @Html.EJ().Dialog("ErrorList").Title("ErrorList").ShowOnInit(false)
    @(Html.EJ().Grid<shift>("Grid")
              .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.Datasource).RemoveURL(Url.Action("InlineDelete", "Shift")).InsertURL(Url.Action("InlineInsert", "Shift")).UpdateURL(Url.Action("InlineInsert", "Shift"))
                       .Adaptor(AdaptorType.RemoteSaveAdaptor).Offline(false))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.InlineFormTemplate).InlineFormTemplateID("#template").ShowDeleteConfirmDialog(true); })
        .EnableAltRow().AllowPaging()
        .PageSettings(p => { p.PageSize(10); })
        .EnableAltRow()
        .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
        {
            items.AddTool(ToolBarItems.Add);
            items.AddTool(ToolBarItems.Edit);            
            items.AddTool(ToolBarItems.Update);
            items.AddTool(ToolBarItems.Cancel);
            items.AddTool(ToolBarItems.ExcelExport);          
            items.AddTool(ToolBarItems.PrintGrid);
        }))
        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "Generic", new { ctrlname = "Shift" })))       
        .AllowSorting()
        .AllowPaging()
        .IsResponsive()
        .AllowFiltering()
        .ShowColumnChooser()
        .AllowReordering()
         .AllowScrolling()
        .ScrollSettings(col => { col.Width("100%"); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .Columns(col =>
        {
            col.Field("shift_id").Width("15%").HeaderText("ID").IsPrimaryKey(true).Visible(false).Width(80).Add();
            col.Field("shift_code").Width("15%").HeaderText("Shift Code").ValidationRules(v => v.AddRule("required", true)).Add();
            col.Field("plant_name").Width("15%").HeaderText("Plant Name").Add();
            col.Field("plant_id").Width("15%").HeaderText("Plant").Visible(false).ValidationRules(v => v.AddRule("required", true)).Add();
            col.Field("from_time").Width("15%").HeaderText("Shift Timings From").ValidationRules(v => v.AddRule("required", true)).Format("{0:HH:mm}").Add();
            col.Field("to_time").Width("15%").HeaderText("Shift Timings To").ValidationRules(v => v.AddRule("required", true)).Format("{0:HH:mm}").Add();
            col.Field("is_blocked").Width("15%").HeaderText("Blocked").Visible(false).Add();
        }).ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
    )
</div>
<script id="template" type="text/template">

    <div>
        <div class="row">

            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="hidden" id="shift_id" name="shift_id" value="{{: shift_id}}" class="form-control" />
            </div>
        </div>
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Plant*
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.DropDownList("plant_id", (System.Web.Mvc.SelectList)ViewBag.plant_list, "---Select---", new { @class = "form-control" })
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Shift Code*
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="text" id="shift_code" name="shift_code" value="{{: shift_code}}" class="form-control" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Shift Timings From*
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="time" id="from_time" name="from_time" value="{{: from_time}}" class="form-control" />
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Shift Timings To*
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="time" id="to_time" name="to_time" value="{{: to_time}}" class="form-control" />
            </div>
        </div>
        <br/>
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
               Blocked
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="checkbox" id="is_blocked" name="is_blocked" value="{{: is_blocked}}" class="form-control" />
            </div>
        </div>
    </div>
</script>

<script type="text/javascript">
    $(function () {

    $.validator.addMethod("customendcheck", function (value, element, params) {
        var a = $('#from_time').val();
        var b = $('#to_time').val();
        //alert(a + "---" + b);
        return b >= a;
        }, "From time can not be greater then to time");
        });
        var flag = true;
        function complete(args) {
            if (args.requestType == "add") {
                $('#is_blocked').checkboxpicker();
                $("#plant_id").select2({
                    maximumSelectionLength: 4,
                    placeholder: "Select Plant",
                    allowClear: true

                });
            }
            if (args.requestType == "beginedit") {
                document.getElementById('plant_id').setAttribute('disabled', 'disabled');
                document.getElementById('shift_code').setAttribute('disabled', 'disabled');
                //  console.log(args.rowData);
                $("#plant_id").val(args.rowData.plant_id);
                $("#plant_id").select2({
                    maximumSelectionLength: 4,
                    placeholder: "Select Parent Code",
                    allowClear: true

                });
                if (args.rowData.is_blocked == true) {
                    //Check
                    document.getElementById('is_blocked').setAttribute('checked', 'checked');
                }
                else {
                    //UnCheck
                    document.getElementById('is_blocked').removeAttribute('checked');
                }
                $('#is_blocked').checkboxpicker();

            }

            if (args.requestType == "save")
            {
                if (args.data.text == 'duplicate') {
                    sweetAlert("", "Shift already exists!", "error");
                    if (args.model.dataSource.dataSource.json[0].shift_id == null) {
                        args.model.dataSource.dataSource.json = args.model.dataSource.dataSource.json.splice(1, args.model.dataSource.dataSource.json.length);
                    }
                }
                var gridObj = $("#Grid").ejGrid("instance");
                gridObj.refreshContent();
            }
        }
        function EndProcess() {
            var gridObj = $("#Grid").ejGrid("instance");
            //console.log(gridObj);
            gridObj.refreshContent();
        }
</script>