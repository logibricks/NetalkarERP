@model IEnumerable<Sciffer.Erp.Domain.Model.ref_asset_group>
@using Sciffer.Erp.Domain.Model
@{
    ViewBag.Title = "Index";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
<br /><br /><br />
<div>
    @Html.EJ().Dialog("ErrorList").Title("ErrorList").ShowOnInit(false)
    @(Html.EJ().Grid<ref_asset_group>("Grid")
        .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.Datasource).RemoveURL(Url.Action("InlineDelete", "AssetGroup")).InsertURL(Url.Action("InlineInsert", "AssetGroup")).UpdateURL(Url.Action("InlineInsert", "AssetGroup"))
                       .Adaptor(AdaptorType.RemoteSaveAdaptor).Offline(false))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.InlineFormTemplate).InlineFormTemplateID("#template").ShowDeleteConfirmDialog(true); })
        .EnableAltRow().AllowPaging().PageSettings(a => a.PageSize(20))
        .PageSettings(p => { p.PageSize(10); })
        .EnableAltRow()
        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);
                //items.AddTool(ToolBarItems.Delete);
                items.AddTool(ToolBarItems.Update);
                items.AddTool(ToolBarItems.Cancel);
                items.AddTool(ToolBarItems.ExcelExport);
                items.AddTool(ToolBarItems.PrintGrid);
            });
        })
        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "Generic", new { ctrlname = "AssetGroup" }))
        .ExportToPdfAction(Url.Action("ExportToPdf", "Generic", new { ctrlname = "AssetGroup" })).ExportToWordAction(Url.Action("ExportToWord", "Generic", new { ctrlname = "AssetGroup" })))
        .AllowSorting()
       .AllowPaging().PageSettings(a => a.PageSize(20)).PageSettings(a => a.PageSize(20))
        .IsResponsive()
        .AllowFiltering()
        .ShowColumnChooser()
        .AllowReordering()
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .Columns(col =>
        {
            col.Field("asset_group_id").HeaderText("ID").IsPrimaryKey(true).Width(80).Visible(false).Add();                
            col.Field("asset_group_code").HeaderText("Asset Code.").ValidationRules(val => val.AddRule("required", true)).Add();
            col.Field("asset_group_des").HeaderText("Asset Description").ValidationRules(val => val.AddRule("required", true)).Add();
            col.Field("is_blocked").HeaderText("Blocked").Visible(false).Add();
        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
    )

</div>

<script id="template" type="text/template">
    <form name="add_form">
        <div>
            <div class="row">
                <div class="col-lg-6 col-md-6 col-xs-12">
                    <input type="hidden" id="asset_group_id" name="asset_group_id" value="{{: asset_group_id}}" class="form-control" />
                </div>
            </div>
            <div class="row">
                <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                    ASSET GROUP CODE *
                </div>
                <div class="col-lg-4 col-md-4 col-xs-12">
                    <input type="text" id="asset_group_code" name="asset_group_code" value="{{: asset_group_code}}" class="form-control" />
                </div>
                <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                    ASSET GROUP DESCRIPTION  *
                </div>
                <div class="col-lg-4 col-md-4 col-xs-12">
                    <input type="text" id="asset_group_des" required name="asset_group_des" value="{{: asset_group_des}}" class="form-control" />

                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-lg-6 col-md-6 col-xs-12">
                    <div class="col-lg-4 col-md-4 col-xs-12" style="text-align: right;">
                        ASSET CLASS *
                    </div>
                    <div class="col-lg-8 col-md-8 col-xs-12">
                        @Html.DropDownList("asset_class_id", (new System.Web.Mvc.SelectList(ViewBag.assetclass, "asset_class_id", "asset_class_code")), "--select--", htmlAttributes: new { @class = "form-control" })

                    </div>
                </div>
                <div class="col-lg-6 col-md-6 col-xs-12" id="block">
                    <div class="col-lg-4 col-md-4 col-xs-12" style="text-align: right;">
                        Blocked
                    </div>
                    <div class="col-lg-8 col-md-8 col-xs-12">
                        <input type="checkbox" name="is_blocked" id="is_blocked" />
                    </div>
                </div>
            </div>
        </div>
       
    </form>
</script>
<script type="text/javascript">
    var flag = true;
  
    function complete(args) {

        $("#asset_class_id").select2({
            placeholder: "Select Asset Class",
            allowClear: true
        });


        if (args.requestType == "beginedit") {
            document.getElementById('asset_group_code').setAttribute('disabled', 'disabled');
            //document.getElementById('asset_group_des').setAttribute('disabled', 'disabled');
            document.getElementById('asset_class_id').setAttribute('disabled', 'disabled');
            $("#asset_class_id").val(args.rowData.asset_class_id).trigger('change');
           
            if (args.rowData.is_blocked == true) {
                document.getElementById("is_blocked").setAttribute('checked', 'checked');
            }
            else {
                document.getElementById("is_blocked").removeAttribute('checked');
            }
            $("#is_blocked").checkboxpicker();
          
        }
        if (args.requestType == "save") {
            if (args.data.text != undefined) {
                sweetAlert("", "Asset Code already exists", "error");
                if (args.model.dataSource.dataSource.json[0].asset_group_id == null) {
                    args.model.dataSource.dataSource.json = args.model.dataSource.dataSource.json.splice(1, args.model.dataSource.dataSource.json.length);
                }
            }
            else {
                sweetAlert("", "Saved Successfully", "success");
            }
            var gridObj = $("#Grid").ejGrid("instance");
            gridObj.refreshContent();
        }
        if (args.requestType == "add") {
            $("#is_blocked").hide();
            $("#block").hide();
        }
    }

    $(document).ready(function () {
        $("#is_blocked").checkboxpicker();
        var doc_no = '@ViewBag.doc';
        if (doc_no != '') {
            if (doc_no != 0) {
                sweetAlert("", doc_no, "success");
            }
        }
    });
    function EndProcess() {
        var gridObj = $("#Grid").ejGrid("instance");
        //console.log(gridObj);
        gridObj.refreshContent();
    }
 
</script>
<style>
    #asset_group_code, #asset_group_des {
        text-align: left !important;
    }
</style>