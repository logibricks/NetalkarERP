<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
@using Sciffer.Erp.Domain.Model
@{
    ViewBag.Title = "Index";
}
<br/><br/><br/>
<div>
    @Html.EJ().Dialog("ErrorList").Title("ErrorList").ShowOnInit(false)
    @(Html.EJ().Grid<REF_PAYMENT_TYPE>("Grid")
         .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.DataSource).RemoveURL(Url.Action("InlineDelete", "PaymentType")).InsertURL(Url.Action("InlineInsert", "PaymentType")).UpdateURL(Url.Action("InlineInsert", "PaymentType"))
                       .Adaptor(AdaptorType.RemoteSaveAdaptor).Offline(false))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.InlineFormTemplate).InlineFormTemplateID("#template").ShowDeleteConfirmDialog(true).ShowConfirmDialog(true); })
        .EnableAltRow().AllowPaging()
        .PageSettings(p => { p.PageSize(10); })
        .EnableAltRow()
        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);               
                items.AddTool(ToolBarItems.Update);
                items.AddTool(ToolBarItems.Cancel);
                items.AddTool(ToolBarItems.ExcelExport);              
                items.AddTool(ToolBarItems.PrintGrid);

            });
        })
        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "Generic", new { ctrlname = "PaymentType" })))           
        .AllowSorting()
        .AllowPaging()
        .IsResponsive()
        .AllowFiltering()
        .ShowColumnChooser()
        .AllowReordering()
          .AllowScrolling()
        .ScrollSettings(col => { col.Width("100%"); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .Columns(col =>
        {
            col.Field("PAYMENT_TYPE_ID").Width("15%").HeaderText("ID").IsPrimaryKey(true).Visible(false).Add();
            col.Field("PAYMENT_TYPE_NAME").Width("15%").HeaderText("Payment Type").ValidationRules(v => v.AddRule("required", true)).Add();
            col.Field("is_blocked").Width("15%").HeaderText("Blocked").Visible(false).Add();

        })
    .ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
    )
</div>

<script id="template" type="text/template">

    <div>
        <div class="row">

            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="hidden" id="PAYMENT_TYPE_ID" name="PAYMENT_TYPE_ID" value="{{: PAYMENT_TYPE_ID}}" class="form-control" />
            </div>
        </div>
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Payment Type *
            </div>
            <div class="col-lg-6 col-md-6 col-xs-12">
                <input type="text" id="PAYMENT_TYPE_NAME" name="PAYMENT_TYPE_NAME" value="{{: PAYMENT_TYPE_NAME}}" class="form-control" />
            </div>
        </div>
        <br />
        
        
        <div class="row">
            <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
                Blocked
            </div>
            <div class="col-md-6 col-sm-6 col-xs-12">
                <input type="checkbox" id="is_blocked" name="is_blocked">
            </div>
        </div>
    </div>
</script>

<script type="text/javascript">
    var flag = true;
    function complete(args) {
        if (args.requestType == "add") {
            $('#is_blocked').checkboxpicker();
        }
        if (args.requestType == "beginedit") {
            
            document.getElementById('PAYMENT_TYPE_NAME').setAttribute('disabled', 'disabled');
            if (args.rowData.is_blocked == true) {
                document.getElementById('is_blocked').setAttribute('checked', 'checked');
            }
            else
            {
                document.getElementById('is_blocked').removeAttribute('checked');
            }
            $('#is_blocked').checkboxpicker();
        }

        if (args.requestType == "save") {
            if (args.data.text == 'duplicate') {
                sweetAlert("", "Payment type already exists!", "error");
                if (args.model.dataSource.dataSource.json[0].PAYMENT_TYPE_ID == null) {
                    args.model.dataSource.dataSource.json = args.model.dataSource.dataSource.json.splice(1, args.model.dataSource.dataSource.json.length);
                }
            }
            var gridObj = $("#Grid").ejGrid("instance");
            gridObj.refreshContent();
        }
    }

    function EndProcess() {
        var gridObj = $("#Grid").ejGrid("instance");
        gridObj.refreshContent();
    }
</script>
