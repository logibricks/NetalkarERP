@using Sciffer.Erp.Domain.ViewModel
@using Syncfusion.JavaScript.Models




@{(Html.EJ().Grid<Report_Item_Accounting_Report_vm>("Editing")
                                                                      .Datasource((IEnumerable<object>)ViewBag.datasource)
                                                                        .AllowPaging().PageSettings(a=>a.PageSize(20))
                                                                        .AllowFiltering()
                                                                            .FilterSettings(X => X.FilterType(FilterType.Excel))
                                                                        .ShowColumnChooser()
                                                                        .AllowSorting()
                                                                        .AllowScrolling()
                                                                        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcelForReport", "Generic", new { ctrlname = "SalesSummaryReport" }))
                                                                        .ExportToPdfAction(Url.Action("ExportToPdfForReport", "Generic", new { ctrlname = "SalesSummaryReport" })))
                                                                        .ScrollSettings(scroll => { scroll.Width("100%"); })

                                                                    .ToolbarSettings(toolbar =>
                                                                    {
                                                                        toolbar.ShowToolbar().ToolbarItems(items =>
                                                                        {
                                                                            items.AddTool(ToolBarItems.Search);
                                                                            items.AddTool(ToolBarItems.ExcelExport);
                                                                            items.AddTool(ToolBarItems.PrintGrid);
                                                                        });
                                                                    })
                                                            .Columns(col =>
                                                            {
                                                                col.Field("Item_Description").Width("10%").HeaderText("Item Description").Add();
                                                                col.Field("Item_Type").Width("10%").HeaderText("Item Type").Add();
                                                                col.Field("Item_Category").Width("10%").HeaderText("Item Category").Visible(false).Add();
                                                                col.Field("Item_group").Width("10%").HeaderText("Item group").Visible(false).Add();
                                                                col.Field("Item_valuation").Width("10%").HeaderText("Item valuation").Visible(false).Add();
                                                                col.Field("Item_Accounting").Width("10%").HeaderText("Item Accounting").Visible(false).Add();
                                                                col.Field("Item_valuation").Width("10%").HeaderText("Item valuation").Visible(false).Add();
                                                                col.Field("Inventory_Account").Width("10%").HeaderText("Inventory Account").Visible(false).Add();
                                                                col.Field("Consumption_Account").Width("10%").HeaderText("Consumption Account").Visible(false).Add();
                                                                col.Field("Revaluation_Account").Width("10%").HeaderText("Revaluation Account").Visible(false).Add();
                                                                col.Field("COGP_Account").Width("10%").HeaderText("COGP Account").Visible(false).Add();
                                                                col.Field("COGS_Account").Width("10%").HeaderText("COGS Account").Visible(false).Add();
                                                                col.Field("Scrap_P_&L_Account").Width("10%").HeaderText("Scrap P &L Account").Visible(false).Add();
                                                                col.Field("Price_Difference_Account").Width("10%").HeaderText("Price Difference Account").Visible(false).Add();
                                                                col.Field("Stock_Differences_Account").Width("10%").HeaderText("Stock Differences Account").Visible(false).Add();
                                                                col.Field("By_Product_P_&L_Account").Width("10%").HeaderText("By Product P &L Account").Visible(false).Add();
                                                                col.Field("GRIR_Clearing_Account").Width("10%").HeaderText("GRIR Clearing Account").Visible(false).Add();
                                                                col.Field("Sales_GL").Width("10%").HeaderText("Sales GL").Visible(false).Add();
                                                                col.Field("Sales_Return_GL").Width("10%").HeaderText("Sales Return GL").Visible(false).Add();
                                                                col.Field("Costing_Difference").Width("10%").HeaderText("Costing Difference").Visible(false).Add();

                                                            })
                                                            .ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
                                                            ).Render();}
@Html.EJ().ScriptManager()
<br />

<script type="text/javascript">

    @*$(function () {
        var obj = @Html.Raw(Json.Encode(ViewBag.datasource));
        console.log(obj);
        $("#Editing").ejGrid({
            dataSource: obj,
            allowPaging: true,
            //columns: [

            //],
            //dataBound : function(args){
            //	for (var fld =0; fld < list.length; fld++ ) {
            //	var column = { field: list[fld].value, headerText: list[fld].header, column: "", textAlign: "left", type: "string", visible: true, width: 75 };
            //	this.model.columns.push(column); //add dynamic columns
            //	}
            //	this.columns(this.model.columns);
            //}
        });
    });*@


</script>



