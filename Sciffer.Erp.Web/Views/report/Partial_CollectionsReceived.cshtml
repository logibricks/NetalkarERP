@using Sciffer.Erp.Domain.ViewModel
@using Syncfusion.JavaScript.Models




@{(Html.EJ().Grid<Report_Collections_Received_Report_vm>("Editing")
                                      .Datasource((IEnumerable<object>)ViewBag.datasource)
                                        .AllowPaging().PageSettings(a=>a.PageSize(20))
                                        .AllowFiltering()
                                            .FilterSettings(X => X.FilterType(FilterType.Excel))
                                        .ShowColumnChooser()
                                        .AllowSorting()
                                        .AllowScrolling()
                                        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcelForReport", "Generic", new { ctrlname = "SalesSummaryReport" }))
                                        .ExportToPdfAction(Url.Action("ExportToPdfForReport", "Generic", new { ctrlname = "SalesSummaryReport" })))
                                        .ScrollSettings(scroll => { scroll.Width("100%"); })

                                    .ToolbarSettings(toolbar =>
                                    {
                                        toolbar.ShowToolbar().ToolbarItems(items =>
                                        {
                                            items.AddTool(ToolBarItems.Search);
                                            items.AddTool(ToolBarItems.ExcelExport);
                                            items.AddTool(ToolBarItems.PrintGrid);
                                        });
                                    })

                                        .ShowSummary()

                                    .SummaryRow(row =>
                                    {
                                        row.Title("Total").SummaryColumns(col =>
                                        {
                                            col.SummaryType(SummaryType.Sum).DisplayColumn("Total_Receivable").DataMember("Total_Receivable").Format("{0:n2}").Add();
                                            col.SummaryType(SummaryType.Sum).DisplayColumn("Received_in_Past").DataMember("Received_in_Past").Format("{0:n2}").Add();
                                            col.SummaryType(SummaryType.Sum).DisplayColumn("Received_in_selected_period").DataMember("Received_in_selected_period").Format("{0:n2}").Add();
                                            col.SummaryType(SummaryType.Sum).DisplayColumn("Adjustement_Selected_Period").DataMember("Adjustement_Selected_Period").Format("{0:n2}").Add();
                                            col.SummaryType(SummaryType.Sum).DisplayColumn("Future_receivable").DataMember("Future_receivable").Format("{0:n2}").Add();

                                        }).Add();
                                    })
                            .Columns(col =>
                            {
                                col.Field("Customer_code").Width("10%").HeaderText("Customer code").Add();
                                col.Field("Customer_Description").Width("10%").HeaderText("Customer Description").Add();
                                col.Field("Doc_Category").Width("10%").HeaderText("Doc Category").Add();
                                col.Field("DOcument_Number").Width("10%").HeaderText("DOcument Number").Visible(false).Add();
                                col.Field("Posting_Date").Width("10%").HeaderText("Posting Date").Visible(false).Add();
                                col.Field("Total_Receivable").Width("10%").HeaderText("Total Receivable").Visible(false).Add();
                                col.Field("Received_in_Past").Width("10%").HeaderText("Received in Past").Visible(false).Add();
                                col.Field("Received_in_selected_period").Width("10%").HeaderText("Received in selected period").Visible(false).Add();
                                col.Field("Adjustement_Selected_Period").Width("10%").HeaderText("Adjustement Selected Period").Visible(false).Add();
                                col.Field("Future_receivable").Width("10%").HeaderText("Future receivable").Visible(false).Add();
                            })
                            .ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
                            ).Render();}
@Html.EJ().ScriptManager()
<br />

<script type="text/javascript">

    @*$(function () {
        var obj = @Html.Raw(Json.Encode(ViewBag.datasource));
        console.log(obj);
        $("#Editing").ejGrid({
            dataSource: obj,
            allowPaging: true,
            //columns: [

            //],
            //dataBound : function(args){
            //	for (var fld =0; fld < list.length; fld++ ) {
            //	var column = { field: list[fld].value, headerText: list[fld].header, column: "", textAlign: "left", type: "string", visible: true, width: 75 };
            //	this.model.columns.push(column); //add dynamic columns
            //	}
            //	this.columns(this.model.columns);
            //}
        });
    });*@


</script>

