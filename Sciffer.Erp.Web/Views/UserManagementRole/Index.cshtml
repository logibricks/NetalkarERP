@using Sciffer.Erp.Domain.Model
@{
    ViewBag.Title = "Index";
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
<br /><br /><br />
<div>
    @Html.EJ().Dialog("ErrorList").Title("ErrorList").ShowOnInit(false)
    @(Html.EJ().Grid<ref_user_management_role>("Grid")
       .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.Datasource).RemoveURL(Url.Action("InlineDelete", "UserManagementRole")).InsertURL(Url.Action("InlineInsert", "UserManagementRole")).UpdateURL(Url.Action("InlineInsert", "UserManagementRole"))
                       .Adaptor(AdaptorType.RemoteSaveAdaptor).Offline(false))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.InlineFormTemplate).InlineFormTemplateID("#template").ShowDeleteConfirmDialog(true); })
         .EnableAltRow()
        .ToolbarSettings(toolBar => toolBar.ShowToolbar().ToolbarItems(items =>
        {
            items.AddTool(ToolBarItems.Add);
            items.AddTool(ToolBarItems.Edit);
            items.AddTool(ToolBarItems.Update);
            items.AddTool(ToolBarItems.Cancel);
           
           
        }))
        .Mappers(map => map.ExportToExcelAction(Url.Action("ExportToExcel", "Generic", new { ctrlname = "UserManagementRole" })))
        .AllowSorting()
        .AllowPaging()
        .IsResponsive()
        .AllowFiltering()
        .ShowColumnChooser()
        .AllowReordering()
         .AllowScrolling()
        .ScrollSettings(col => { col.Width("100%"); })
        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
        .Columns(col =>
        {
            col.Field("role_id").Width("15%").HeaderText("ID").IsPrimaryKey(true).Visible(false).Width(80).Add();
            col.Field("role_code").Width("15%").HeaderText("Role Code").ValidationRules(val => val.AddRule("required", true)).Add();
            col.Field("role_name").Width("15%").HeaderText("Role ").ValidationRules(val => val.AddRule("required", true)).Add();
            
            col.Field("is_block").Width("15%").HeaderText("Blocked").Visible(false).Add();

        }).ClientSideEvents(eve => { eve.ActionComplete("complete").EndAdd("EndProcess").EndDelete("EndProcess").EndEdit("EndProcess"); })
    )
</div>
<script id="template" type="text/template">
    <div class="row">
        <input type="hidden" id="role_id" class="" name="role_id" value="{{: role_id}}">
    </div>
    <div class="row">
        <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
            Role Code *
        </div>
        <div class="col-lg-6 col-md-6 col-xs-12">
            <input type="text" id="role_code" name="role_code" class="form-control" value="{{:role_code}}">
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
            Role Name *
        </div>
        <div class="col-lg-6 col-md-6 col-xs-12">
            <input type="text" id="role_name" name="role_name" class="form-control" value="{{:role_name}}">
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-lg-2 col-md-2 col-xs-12" style="text-align: right;">
            Blocked
        </div>
        <div class="col-md-6 col-sm-6 col-xs-12">
            <input type="checkbox" id="is_block" name="is_block">
        </div>
    </div>
</script>
<script>
    var flag = true;
    function complete(args) {
        if (args.requestType == "add") {
            $('#is_block').checkboxpicker();
        }
        if (args.requestType == "save") {
            if (args.data.text == 'duplicate') {
                sweetAlert("", "Role already exists!", "error");
                if (args.model.dataSource.dataSource.json[0].role_id == null) {
                    args.model.dataSource.dataSource.json = args.model.dataSource.dataSource.json.splice(1, args.model.dataSource.dataSource.json.length);
                }
            }
            var gridObj = $("#Grid").ejGrid("instance");
            gridObj.refreshContent();
        }
        if (args.requestType == "beginedit") {

            $("#role_code").attr('disabled', 'disabled');
            if (args.rowData.is_block == true) {
                //Check
                document.getElementById('is_block').setAttribute('checked', 'checked');
            }
            else {
                //UnCheck
                document.getElementById('is_block').removeAttribute('checked');
            }

            $('#is_block').checkboxpicker();
        }
    }
    function EndProcess() {
        var gridObj = $("#Grid").ejGrid("instance");
        //console.log(gridObj);
        gridObj.refreshContent();
    }
</script>
